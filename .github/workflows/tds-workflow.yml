name: TDS Workflow
on: push
# on:
#   push:
#     branches: [ master, main ]
#   pull_request:
#     branches: [ master, main ]

env:
  NODE_VERSION: "12.14.x"
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: Bootstrap
        if: ${{ steps.cache-tds-files-shared-node-modules.outputs.cache-hit != 'true' || steps.cache-tds-files-shared-dist.outputs.cache-hit != 'true' || steps.cache-tds-files-packages-node-modules.outputs.cache-hit != 'true' || steps.cache-tds-files-packages-dist.outputs.cache-hit != 'true' || steps.cache-tds-files-node-modules.outputs.cache-hit != 'true' }}
        run: npm run bootstrap

  lint:
    name: Lint Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: Run Lint Tests
        run: npm run lint

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.14.x"

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: Run Unit Tests
        run: npm run test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: Build Cartesian Components
        run: npm run build:e2e

      - name: Get Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - name: Upload Cartesian Components To S3 Bucket
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "e2e/visual/dist"
          DEST_DIR: "pr/${{steps.get_branch.outputs.branch}}/e2e"

      - name: Run E2E Tests
        env:
          SAUCELABS_USERNAME: ${{ secrets.SAUCELABS_USERNAME }}
          SAUCELABS_ACCESS_KEY: ${{ secrets.SAUCELABS_ACCESS_KEY }}
        run: npm run test:e2e -- -n ${{steps.get_branch.outputs.branch}}

      - name: Upload E2E Output
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: output
          path: e2e/output/components

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: GitBook install
        run: npm run gitbook:install

      - name: Build Gitbook and Styleguidist
        run: npm run build-docs:gitbook && npm run ci:build-docs:styleguide-staging

      - name: Copy files
        run: mkdir -p build/staging && cp -R guide/_book/* build/staging && cp -R styleguide/staging build/staging/components

      - name: Get Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - name: Upload Styleguidist and Gitbook To S3 Bucket
        uses: jakejarvis/s3-sync-action@v0.5.0
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "build/staging"
          DEST_DIR: "pr/${{steps.get_branch.outputs.branch}}/docs"

  prepr-log:
    if: github.event_name == 'pull_request'
    name: Pre PR logs
    runs-on: ubuntu-latest
    needs: [lint, unit, e2e, docs]
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache shared node modules
        uses: actions/cache@v2
        id: cache-tds-files-shared-node-modules
        with:
          path: "*/*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache shared dist
        uses: actions/cache@v2
        id: cache-tds-files-shared-dist
        with:
          path: "*/*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/*/package.json') }}

      - name: Cache packages node modules
        uses: actions/cache@v2
        id: cache-tds-files-packages-node-modules
        with:
          path: "*/*/node_modules"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache packages dist
        uses: actions/cache@v2
        id: cache-tds-files-packages-dist
        with:
          path: "*/*/dist"
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('*/*/package.json') }}

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-tds-files-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ github.action}}-${{ hashFiles('package-lock.json') }}

      - name: Pre PR log output
        run: scripts/prePr.sh

  prepr-bot:
    if: github.event_name == 'pull_request'
    name: Pre PR bot
    runs-on: ubuntu-latest
    needs: prepr-log
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git Config & Branch
        run: |
          git status
          git config --global user.email "tds.github.bot@gmail.com"
          git config --global user.name "TDSBot"

      - name: Rebase branch
        run: |
          git checkout master
          git pull --rebase

      - name: Set pull request number environment variable
        run: echo "GITHUB_PULL_REQUEST=$(echo '${{ github.event.pull_request.number }}')" >> $GITHUB_ENV

      - name: TDS Bot output
        run: node ./scripts/gha/github-pr.js

  release:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    name: Cut a release
    runs-on: ubuntu-latest
    needs: prepr-bot
    environment:
      name: npm
      url: ${{ steps.get_url.outputs.url }}
    steps:
      - name: Configure Git Config & Branch
        run: |
          git status
          git config --global user.email "tds.github.bot@gmail.com"
          git config --global user.name "TDSBot"
          git fetch origin --tags

      - name: Setup .npmrc
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Set environment url output
        id: get_url
        shell: bash
        run: echo "::set-output name=url::https://www.npmjs.com/package/@telus/tds-core-test/"

      - name: Lerna Publish
        run: npm run lerna:cipublish

      - name: Update contributors
        run: npm run contributors:update

      - name: Commit updated contributors
        run: |
          if [[ $(git diff --name-only) ]]
          then
            git add .all-contributorsrc README.md
            git commit -m "chore(other): update contributors"
            git push
          else
            echo 'No contributor changes.'
          fi
