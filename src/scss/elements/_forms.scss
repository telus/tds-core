$icon-font-prefix: 'https://cdn.telus.digital/thorium/core/v0.4.0';

// Utility Icons web font
@font-face {
  font-family: 'TELUS Core Icons';
  src: url('#{$icon-font-prefix}/core-icons.eot');
  src: url('#{$icon-font-prefix}/core-icons.woff2') format('woff2'),
    url('#{$icon-font-prefix}/core-icons.woff') format('woff'),
    url('#{$icon-font-prefix}/core-icons.ttf') format('truetype'),
    url('#{$icon-font-prefix}/core-icons.eot?#iefix') format('eot');
  font-weight: normal;
  font-style: normal;
}

// Unicode points of each icon's location within the font files.
$core-icon-codepoints: (
  alert: '\f103',
  caret-down: '\f105',
  caret-up: '\f106',
  checkmark: '\f101',
  chevron: '\f107',
  close: '\f104',
  dash: '\f109',
  exclamation-point-circle: '\f103',
  expander: '\f113',
  hamburger: '\f112',
  help: '\f102',
  incomplete: '\f104',
  location: '\f110',
  minus: '\f109',
  plus: '\f108',
  question-mark-circle: '\f102',
  spyglass: '\f111',
  times: '\f104'
);

// Get the unicode point for a given icon name
@function core-icon-codepoint($name) {
  @return map-get($core-icon-codepoints, $name);
}

@mixin core-icon($name: null) {
  @if $name {
    &::before {
      content: core-icon-codepoint($name);
    }
  }

  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Form styles for input fields, drop-downs, selections, and hints.

$form-field-border-radius: 4px;
$form-field-bottom-spacing: 18px;

//
// Default input styling
//

// TODO: The :not([data-no-global-styles]) prevents these styles from overriding the modular styles for the new components
//       The data-no-global-styles attribute can be completely removed when deleting these styles.

input:not([type='radio']):not([data-no-global-styles]),
textarea:not([data-no-global-styles]),
select:not([data-no-global-styles]) {
  border: 1px solid $color-shuttle-grey;
  border-radius: $form-field-border-radius;
  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.05);
  color: $color-shark;
  font-family: $font-telus;
  font-size: rem($body-text-size);
  letter-spacing: 0.4px;
  line-height: 1.4;
  outline: 0;
  padding: 11px;
  width: 100%;
  transition: background-color 0.1s linear;

  .field & {
    margin-bottom: $form-field-bottom-spacing;
  }

  .field--error & {
    border-color: $color-cardinal;
    padding-right: 45px;
  }

  .field--success & {
    border-color: $color-primary;
  }

  @include from-breakpoint(medium) {
    letter-spacing: 0.5px;
  }
}

%input-focus-style {
  border-color: transparent;
  box-shadow: 0 0 4px 1px $color-shuttle-grey;
}

textarea:not([data-no-global-styles]):focus {
  @extend %input-focus-style;
}

input[type='checkbox']:not([data-no-global-styles]):focus + span::before,
input[type='radio']:not([data-no-global-styles]):focus + span::before {
  @extend %input-focus-style;
}

input:not([type='radio']),
input:not([type='checkbox']),
input[type='text']:not([data-no-global-styles]),
input[type='tel']:not([data-no-global-styles]),
input[type='number']:not([data-no-global-styles]),
input[type='search']:not([data-no-global-styles]),
input[type='email']:not([data-no-global-styles]),
input[type='ulr']:not([data-no-global-styles]),
input[type='password']:not([data-no-global-styles]),
select:not([data-no-global-styles]) {
  &:focus {
    @extend %input-focus-style;
  }
}

input:not([data-no-global-styles]),
select:not([data-no-global-styles]) {
  &:disabled {
    background-color: $color-athens-grey !important;
    border-color: $color-shuttle-grey !important;
  }
}

select:not([data-no-global-styles]),
option:not([data-no-global-styles]) {
  appearance: none;
  background: none;
}

select:not([data-no-global-styles]) {
  height: rem(52px);

  // Hide the "drop down selector" pseudo element inserted by IE.
  &::-ms-expand {
    display: none;
  }
}

label:not([data-no-global-styles]) {
  display: inline-block;
  color: $color-shark;
  font-weight: 700;
  letter-spacing: -0.6px;
  margin-bottom: 3px;
}

// Prevent IE11 from color placeholders the same as regular text.
input:not([data-no-global-styles]),
textarea:not([data-no-global-styles]) {
  &:-ms-input-placeholder {
    color: GrayText !important;
  }
}

// Common styles for the "alert" and "down caret" icons that are
// positioned around input/dropdown fields.
%field__control__icon {
  position: absolute;
  font-size: rem($body-text-size);
  line-height: 1;
  display: block;
}

//
// Container for the controls making up a form field.
//

.field {
  position: relative;

  &--hinted {
    label:not([data-no-global-styles]) {
      width: 91%;
    }
  }

  &__control {
    position: relative;
    background: $color-white;
    border-radius: $form-field-border-radius;
    margin-bottom: $form-field-bottom-spacing;

    .field--error & {
      &::before {
        @include core-icon();

        @extend %field__control__icon;

        top: 50%;
        transform: translateY(-50%);
        content: core-icon-codepoint(exclamation-point-circle);
        right: 15px;
        color: $color-cardinal;
      }
    }

    &--dropdown {
      &::after {
        @include core-icon();

        @extend %field__control__icon;

        content: core-icon-codepoint(caret-down);
        top: 20px;
        right: 20px;
        color: $color-primary;
      }

      .field--error & {
        &::before {
          right: 45px;
        }

        &::after {
          color: $color-cardinal;
        }
      }
    }

    &--disabled {
      &::after {
        color: $color-shuttle-grey;
      }
    }

    // The red "alert" icon should be hidden when a field w/ an error is in
    // focus. Since the icon is a pseudo element which can't be targeted with
    // a sibling selector, we absolutely position it underneath the form input,
    // and make the input's background transparent on focus.
    //
    // The .field__control parent element is the same size as the input and
    // is colored white, to support placing form fields on a non-white bg.
    input:not([type='radio']):not([type='checkbox']),
    select:not([data-no-global-styles]),
    textarea:not([data-no-global-styles]) {
      background: transparent;
      margin-bottom: 0;
      position: relative;

      &:focus {
        background: $color-white;
      }
    }
  }
}

//
// Textarea
//

textarea:not([data-no-global-styles]) {
  height: 12em;
  padding-top: 18px;
  line-height: $body-line-height;
  overflow: auto;
}

//
// Helpers
//

.helper {
  font-size: rem(16px);
  background: $color-athens-grey;
  padding: 11px 16px 16px;
  border-radius: 4px;
  margin-bottom: 11px;
  transition: background-color 0.1s linear;

  &--success {
    background: $color-panache;
  }

  &--error {
    background-color: $color-lavender-blush;
    color: $color-cardinal;

    li {
      color: $color-text;
    }
  }
}

//
// Selections (radio & checkbox)
//

// Thickness of the green border when a radio input is checked
$radio-checked-stroke-size: 6px;

// HACK ALERT! Temporary. This makes the choice class more specific than the label:not([data-no-global-styles]) selector. #ihateglobalcss
.choice.choice {
  font-weight: 400;
  display: block;
  cursor: pointer;
  margin-bottom: 8px;

  &__text {
    color: $color-shark;
  }
}

[type='radio']:not([data-no-global-styles]),
[type='checkbox']:not([data-no-global-styles]) {
  @extend %accessible-hide;

  cursor: pointer;

  &:checked {
    & + .choice__text {
      color: $color-shark;
    }
  }

  .choice:not(.choice--error) & {
    &:hover:not(:checked):not(:disabled) {
      & + .choice__text {
        &::before {
          border-color: $color-shark;
          box-shadow: 0 0 0 1px rgba(35, 135, 0, 0.25);
        }
      }
    }
  }

  &:active {
    & + .choice__text {
      &::before {
        border-color: $color-primary;
      }
    }
  }

  &:disabled {
    & + .choice__text {
      cursor: not-allowed;

      &::before {
        background: $color-athens-grey;
      }
    }
  }

  .choice--error & {
    & + .choice__text,
    &:checked + .choice__text {
      color: $color-cardinal;

      &::before {
        border-color: $color-cardinal;
      }
    }
  }

  + .choice__text {
    position: relative;
    padding-left: 2em;
    display: inline-block;

    &::before {
      content: '';
      display: inline-block;
      position: absolute;
      top: 1px;
      left: 0;
      border: solid 1px $color-shuttle-grey;
      height: 22px;
      width: 22px;
      line-height: 1.4;
      transition: all 0.1s linear;
    }
  }
}

[type='radio']:not([data-no-global-styles]) {
  &:active {
    & + .choice__text {
      &::before {
        border-width: $radio-checked-stroke-size;
      }
    }
  }

  &:checked {
    & + .choice__text {
      &::before {
        border: solid $radio-checked-stroke-size $color-primary;
      }
    }

    &:disabled {
      & + .choice__text {
        &::before {
          background: $color-shuttle-grey;
          border: solid $radio-checked-stroke-size $color-athens-grey;
          box-shadow: 0 0 0 1px $color-shuttle-grey;
          width: 20px;
          height: 20px;
        }
      }
    }
  }

  + .choice__text {
    &::before {
      border-radius: 50%;
      margin-top: 5px;
    }
  }
}

[type='checkbox']:not([data-no-global-styles]) {
  &:checked {
    & + .choice__text {
      &::before {
        content: core-icon-codepoint(checkmark);
      }
    }

    &:disabled {
      & + .choice__text {
        &::before {
          color: $color-white;
          background-color: $color-shuttle-grey;
        }
      }
    }

    &:not(:disabled) {
      & + .choice__text {
        &::before {
          background: $color-primary;
          border: none;
        }
      }
    }
  }

  &:disabled {
    & + .choice__text {
      &::before {
        border-color: $color-shuttle-grey;
      }
    }
  }

  + .choice__text {
    &::before {
      border-radius: 4px;
      color: white;
      font-family: $font-icons;
      font-size: 1rem;
      text-align: center;
      margin-top: 4px;
    }
  }

  .choice--error & {
    &:checked + .choice__text {
      &::before {
        background: $color-cardinal;
      }
    }
  }
}

//
// Hints
//

.hint {
  position: absolute;
  top: 0;
  right: 0;

  // Extra padding is added to a .field that follows a level 2 headline to
  // increase space between the headline text and label. Inheriting
  // the .field's padding in the .hint keeps the hint icon in line with
  // the field's label.
  padding-top: inherit;

  &:not(.hint--active) {
    .hint__text {
      @extend %accessible-hide;
    }
  }

  &__trigger {
    width: $body-text-size;
    font-size: rem(20px);
    font-weight: 400;

    &::before {
      content: core-icon-codepoint(question-mark-circle);
      font-family: $font-icons;
      color: $color-shuttle-grey;
      line-height: $body-line-height;
      display: inline-block;
      width: $body-text-size;
    }
  }

  &__text {
    display: block;
    position: absolute;
    top: -10px;
    right: 5px;
    font-size: rem(16px);
    width: 200px;
    padding: 15px 20px;
    background-color: white;
    box-shadow: 0 0 2px 0 #2a2c2e, 0 3px 2px 0 rgba(84, 89, 95, 0.25);
    border-radius: 4px;
    transform: translate(15px, -100%);

    &::before,
    &::after {
      display: block;
      content: '';
      position: absolute;
    }

    // The 'before' pseudo element is the triangle at the bottom of the
    // speech bubble.
    &::before {
      box-shadow: 2px 2px 3px 0 rgba(42, 42, 44, 0.4);
      background-color: white;
      bottom: -7px;
      right: 12px;
      border-width: 7px;
      border-style: solid;
      border-color: transparent white white transparent;
      transform: rotate(45deg);
    }

    // The 'after' pseudo element masks the top half of the triangle,
    // preventing the box-shadow from appearing inside the speech
    // bubble.
    &::after {
      bottom: 0;
      right: 5px;
      width: 27px;
      height: 14px;
      background: white;
    }
  }
}
