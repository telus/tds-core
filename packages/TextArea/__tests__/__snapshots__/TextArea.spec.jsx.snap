// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextArea disabling can be disabled 1`] = `
.c0 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c0::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::-webkit-inner-spin-button,
.c0::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c0:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

<textarea
  aria-invalid={false}
  className="c0"
  id="the-textarea"
  onBlur={[Function]}
  onFocus={[Function]}
/>
`;

exports[`TextArea feedback states ensures that the contents do not overlap the icon 1`] = `
.c0 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c0::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c0::-webkit-inner-spin-button,
.c0::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c0:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c0:not(:focus) {
  border-color: #248700;
}

<textarea
  aria-invalid={false}
  className="c0"
  id="the-textarea"
  onBlur={[Function]}
  onFocus={[Function]}
/>
`;

exports[`TextArea label can have a short hint 1`] = `
.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-textarea"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-ifAKCX",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-ifAKCX",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <span
          className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <Text
            block={false}
            bold={true}
            invert={false}
            size="medium"
          >
            <Text__StyledText
              block={false}
              bold={true}
              invert={false}
              size="medium"
            >
              <StyledComponent
                block={false}
                bold={true}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Text__StyledText-sc-1m0rr67-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                        [Function],
                        [Function],
                        "sup {",
                        "top: -0.5em;",
                        "font-size: 0.875rem;",
                        "position: relative;",
                        "vertical-align: baseline;",
                        "padding-left: 0.1em;",
                        "}",
                      ],
                    },
                    "displayName": "Text__StyledText",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                invert={false}
                size="medium"
              >
                <span
                  className="c1"
                  size="medium"
                >
                  The textarea
                </span>
              </StyledComponent>
            </Text__StyledText>
          </Text>
          <Text
            block={false}
            bold={false}
            id="the-textarea_hint"
            invert={false}
            size="small"
          >
            <Text__StyledText
              block={false}
              bold={false}
              id="the-textarea_hint"
              invert={false}
              size="small"
            >
              <StyledComponent
                block={false}
                bold={false}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Text__StyledText-sc-1m0rr67-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                        [Function],
                        [Function],
                        "sup {",
                        "top: -0.5em;",
                        "font-size: 0.875rem;",
                        "position: relative;",
                        "vertical-align: baseline;",
                        "padding-left: 0.1em;",
                        "}",
                      ],
                    },
                    "displayName": "Text__StyledText",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="the-textarea_hint"
                invert={false}
                size="small"
              >
                <span
                  className="c2"
                  id="the-textarea_hint"
                  size="small"
                >
                  The short hint
                </span>
              </StyledComponent>
            </Text__StyledText>
          </Text>
        </span>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`TextArea renders 1`] = `
.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c2 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c4 {
  position: absolute;
  right: 1rem;
  top: 0.5rem;
  overflow: visible;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div
    class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
  >
    <label
      for="the-textarea"
    >
      <span
        class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
      >
        <span
          class="c1"
        >
          The textarea
        </span>
      </span>
    </label>
  </div>
  <div
    class="c2"
  >
    <textarea
      aria-invalid="false"
      class="c3"
      id="the-textarea"
    />
    <div
      class="c4"
    />
  </div>
</div>
`;

exports[`TextArea renders with a feedback state and icon 1`] = `
.c6 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c6::before {
  content: '\\f103';
}

.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c5 {
  line-height: 1;
}

.c2 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  max-width: 100%;
  min-width: 100%;
  min-height: 208px;
  position: relative;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c3:not(:focus) {
  border-color: #c12335;
}

.c4 {
  position: absolute;
  right: 1rem;
  top: 0.5rem;
  overflow: visible;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div
    class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
  >
    <label
      for="the-textarea"
    >
      <span
        class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
      >
        <span
          class="c1"
        >
          The textarea
        </span>
      </span>
    </label>
  </div>
  <div
    class="c2"
  >
    <textarea
      aria-invalid="true"
      class="c3"
      id="the-textarea"
    />
    <div
      class="c4"
    >
      <div
        style="transition:opacity 100ms ease-in-out;opacity:1"
      >
        <div
          class="c5"
        >
          <i
            class="c6"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
