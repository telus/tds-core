// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input feedback states ensures that the contents do not overlap the icons 1`] = `
.c8 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #2B8000;
  font-size: 1rem;
}

.c8::before {
  content: '\\f101';
}

.c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c7 {
  line-height: 1;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 1rem;
}

.c5::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-webkit-inner-spin-button,
.c5::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c5:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c5:not(:focus) {
  border-color: #2B8000;
}

.c6 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c4 {
  position: relative;
}

<div
  class="c0"
>
  <div>
    <div
      class="c1"
    >
      <label
        for="the-input"
      >
        <span
          class="c2 sc-bxivhb c2 c1"
        >
          <span
            class="c3"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c4"
  >
    <input
      aria-invalid="false"
      class="c5"
      id="the-input"
      type="text"
    />
    <div
      class="c6"
    >
      <div
        style="transition:opacity 100ms ease-in-out;opacity:1"
      >
        <div
          class="c7"
        >
          <i
            class="c8"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Input label can have a short hint 1`] = `
Object {
  "blur": [Function],
  "changeValueTo": [Function],
  "findFeedbackIconFade": [Function],
  "findHelper": [Function],
  "findInputElement": [Function],
  "focus": [Function],
  "input": .c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c4 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c4 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c6 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 1rem;
}

.c6::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c6::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c6:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c6::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c6::-webkit-inner-spin-button,
.c6::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c6:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c7 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c5 {
  position: relative;
}

<Input
    hint="The short hint"
    hintPosition="inline"
    id="the-id"
    label="The input"
    type="text"
  >
    <Box
      between={2}
      inline={false}
      tag="div"
    >
      <styled.div
        between={2}
        inline={false}
        tag="div"
      >
        <StyledComponent
          between={2}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [
                [Function],
              ],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inline={false}
          tag="div"
        >
          <div
            className="c0"
          >
            <div>
              <Box
                between={2}
                inline={true}
                tag="div"
              >
                <styled.div
                  between={2}
                  inline={true}
                  tag="div"
                >
                  <StyledComponent
                    between={2}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [
                          [Function],
                        ],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "c1",
                          "rules": Array [
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    inline={true}
                    tag="div"
                  >
                    <div
                      className="c1"
                    >
                      <label
                        htmlFor="the-id"
                      >
                        <Styled(Box)
                          between={2}
                          inline={true}
                          tag="span"
                        >
                          <StyledComponent
                            between={2}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bxivhb",
                                  "isStatic": true,
                                  "lastClassName": "c2",
                                  "rules": Array [
                                    "align-items: center;",
                                  ],
                                },
                                "displayName": "Styled(Box)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bxivhb",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            inline={true}
                            tag="span"
                          >
                            <Box
                              between={2}
                              className="c2"
                              inline={true}
                              tag="span"
                            >
                              <styled.div
                                between={2}
                                className="c2"
                                inline={true}
                                tag="span"
                              >
                                <StyledComponent
                                  between={2}
                                  className="c2"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [
                                        [Function],
                                      ],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-bdVaJa",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                          [Function],
                                          [Function],
                                          [Function],
                                          [Function],
                                          [Function],
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-bdVaJa",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inline={true}
                                  tag="span"
                                >
                                  <span
                                    className="c2 sc-bxivhb c2 c1"
                                  >
                                    <Text
                                      block={false}
                                      bold={true}
                                      invert={false}
                                      size="medium"
                                    >
                                      <Text__StyledText
                                        block={false}
                                        bold={true}
                                        invert={false}
                                        size="medium"
                                      >
                                        <StyledComponent
                                          block={false}
                                          bold={true}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "Text__StyledText-sc-1m0rr67-0",
                                                "isStatic": false,
                                                "lastClassName": "c4",
                                                "rules": Array [
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  "sup {",
                                                  "top: -0.5em;",
                                                  "font-size: 0.875rem;",
                                                  "position: relative;",
                                                  "vertical-align: baseline;",
                                                  "padding-left: 0.1em;",
                                                  "}",
                                                ],
                                              },
                                              "displayName": "Text__StyledText",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          invert={false}
                                          size="medium"
                                        >
                                          <span
                                            className="c3"
                                            size="medium"
                                          >
                                            The input
                                          </span>
                                        </StyledComponent>
                                      </Text__StyledText>
                                    </Text>
                                    <Text
                                      block={false}
                                      bold={false}
                                      invert={false}
                                      size="small"
                                    >
                                      <Text__StyledText
                                        block={false}
                                        bold={false}
                                        invert={false}
                                        size="small"
                                      >
                                        <StyledComponent
                                          block={false}
                                          bold={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "Text__StyledText-sc-1m0rr67-0",
                                                "isStatic": false,
                                                "lastClassName": "c4",
                                                "rules": Array [
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  [Function],
                                                  "sup {",
                                                  "top: -0.5em;",
                                                  "font-size: 0.875rem;",
                                                  "position: relative;",
                                                  "vertical-align: baseline;",
                                                  "padding-left: 0.1em;",
                                                  "}",
                                                ],
                                              },
                                              "displayName": "Text__StyledText",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          invert={false}
                                          size="small"
                                        >
                                          <span
                                            className="c4"
                                            size="small"
                                          >
                                            The short hint
                                          </span>
                                        </StyledComponent>
                                      </Text__StyledText>
                                    </Text>
                                  </span>
                                </StyledComponent>
                              </styled.div>
                            </Box>
                          </StyledComponent>
                        </Styled(Box)>
                      </label>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Box>
            </div>
            <styled.div
              _css={
                Object {
                  "position": "relative",
                }
              }
            >
              <StyledComponent
                _css={
                  Object {
                    "position": "relative",
                  }
                }
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "c5",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c5"
                >
                  <Input__StyledInput
                    aria-invalid={false}
                    id="the-id"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    type="text"
                  >
                    <StyledComponent
                      aria-invalid={false}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Input__StyledInput-sc-8rmijy-0",
                            "isStatic": false,
                            "lastClassName": "c6",
                            "rules": Array [
                              "width: 100%;",
                              "margin: 0;",
                              "outline: 0;",
                              "text-overflow: ellipsis;",
                              "border-color: #54595f;",
                              "&::placeholder {",
                              "font: inherit;",
                              "letter-spacing: inherit;",
                              "line-height: inherit;",
                              "color: #54595f;",
                              "}",
                              "border-width: 1px;",
                              "border-style: solid;",
                              "border-radius: 4px;",
                              "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                              "word-wrap: break-word;",
                              "font-size: 1rem;",
                              "letter-spacing: -0.8px;",
                              "line-height: 1.5;",
                              "font-weight: 400;",
                              "color: #2a2c2e;",
                              [Function],
                              "&:focus {",
                              "border-color: transparent;",
                              "box-shadow: 0 0 4px 1px #54595f;",
                              "background-color: #fff;",
                              "}",
                              [Function],
                              [Function],
                            ],
                          },
                          "displayName": "Input__StyledInput",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Input__StyledInput-sc-8rmijy-0",
                          "target": "input",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      id="the-id"
                      onBlur={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      type="text"
                    >
                      <input
                        aria-invalid={false}
                        className="c6"
                        id="the-id"
                        onBlur={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                      />
                    </StyledComponent>
                  </Input__StyledInput>
                  <Input__StyledFeedbackIcon>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Input__StyledFeedbackIcon-sc-8rmijy-1",
                            "isStatic": true,
                            "lastClassName": "c7",
                            "rules": Array [
                              "right: 1rem;",
                              "position: absolute;",
                              "top: 50%;",
                              "transform: translateY(-50%);",
                            ],
                          },
                          "displayName": "Input__StyledFeedbackIcon",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Input__StyledFeedbackIcon-sc-8rmijy-1",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="c7"
                      >
                        <FeedbackIcon
                          showIcon={false}
                        >
                          <Fade
                            in={false}
                            mountOnEnter={true}
                            timeout={100}
                            unmountOnExit={true}
                          >
                            <Transition
                              appear={false}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={true}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={100}
                              unmountOnExit={true}
                            />
                          </Fade>
                        </FeedbackIcon>
                      </div>
                    </StyledComponent>
                  </Input__StyledFeedbackIcon>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </Box>
  </Input>,
  "label": .c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
    htmlFor="the-id"
  >
    <Styled(Box)
      between={2}
      inline={true}
      tag="span"
    >
      <StyledComponent
        between={2}
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bxivhb",
              "isStatic": true,
              "lastClassName": "c0",
              "rules": Array [
                "align-items: center;",
              ],
            },
            "displayName": "Styled(Box)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bxivhb",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        inline={true}
        tag="span"
      >
        <Box
          between={2}
          className="c0"
          inline={true}
          tag="span"
        >
          <styled.div
            between={2}
            className="c0"
            inline={true}
            tag="span"
          >
            <StyledComponent
              between={2}
              className="c0"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              inline={true}
              tag="span"
            >
              <span
                className="c0 sc-bxivhb c0 c1"
              >
                <Text
                  block={false}
                  bold={true}
                  invert={false}
                  size="medium"
                >
                  <Text__StyledText
                    block={false}
                    bold={true}
                    invert={false}
                    size="medium"
                  >
                    <StyledComponent
                      block={false}
                      bold={true}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Text__StyledText-sc-1m0rr67-0",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              [Function],
                              [Function],
                              [Function],
                              [Function],
                              [Function],
                              "sup {",
                              "top: -0.5em;",
                              "font-size: 0.875rem;",
                              "position: relative;",
                              "vertical-align: baseline;",
                              "padding-left: 0.1em;",
                              "}",
                            ],
                          },
                          "displayName": "Text__StyledText",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      invert={false}
                      size="medium"
                    >
                      <span
                        className="c2"
                        size="medium"
                      >
                        The input
                      </span>
                    </StyledComponent>
                  </Text__StyledText>
                </Text>
                <Text
                  block={false}
                  bold={false}
                  invert={false}
                  size="small"
                >
                  <Text__StyledText
                    block={false}
                    bold={false}
                    invert={false}
                    size="small"
                  >
                    <StyledComponent
                      block={false}
                      bold={false}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Text__StyledText-sc-1m0rr67-0",
                            "isStatic": false,
                            "lastClassName": "c3",
                            "rules": Array [
                              [Function],
                              [Function],
                              [Function],
                              [Function],
                              [Function],
                              "sup {",
                              "top: -0.5em;",
                              "font-size: 0.875rem;",
                              "position: relative;",
                              "vertical-align: baseline;",
                              "padding-left: 0.1em;",
                              "}",
                            ],
                          },
                          "displayName": "Text__StyledText",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                          "target": "span",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      invert={false}
                      size="small"
                    >
                      <span
                        className="c3"
                        size="small"
                      >
                        The short hint
                      </span>
                    </StyledComponent>
                  </Text__StyledText>
                </Text>
              </span>
            </StyledComponent>
          </styled.div>
        </Box>
      </StyledComponent>
    </Styled(Box)>
  </label>,
}
`;

exports[`Input renders 1`] = `
.c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 1rem;
}

.c5::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-webkit-inner-spin-button,
.c5::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c5:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c6 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c4 {
  position: relative;
}

<div
  class="c0"
>
  <div>
    <div
      class="c1"
    >
      <label
        for="the-input"
      >
        <span
          class="c2 sc-bxivhb c2 c1"
        >
          <span
            class="c3"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c4"
  >
    <input
      aria-invalid="false"
      class="c5"
      id="the-input"
      type="text"
    />
    <div
      class="c6"
    />
  </div>
</div>
`;

exports[`Input renders with a feedback state and icon 1`] = `
.c8 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c8::before {
  content: '\\f103';
}

.c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c7 {
  line-height: 1;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 1rem;
}

.c5::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c5::-webkit-inner-spin-button,
.c5::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c5:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c5:not(:focus) {
  border-color: #c12335;
}

.c6 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c4 {
  position: relative;
}

<div
  class="c0"
>
  <div>
    <div
      class="c1"
    >
      <label
        for="the-input"
      >
        <span
          class="c2 sc-bxivhb c2 c1"
        >
          <span
            class="c3"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c4"
  >
    <input
      aria-invalid="true"
      class="c5"
      id="the-input"
      type="text"
    />
    <div
      class="c6"
    >
      <div
        style="transition:opacity 100ms ease-in-out;opacity:1"
      >
        <div
          class="c7"
        >
          <i
            class="c8"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
