// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input feedback states ensures that the contents do not overlap the icons 1`] = `
.c6 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #248700;
  font-size: 1rem;
}

.c6::before {
  content: '\\f101';
}

.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c5 {
  line-height: 1;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 1rem;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c3:not(:focus) {
  border-color: #248700;
}

.c4 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c2 {
  position: relative;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div>
    <div
      class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
    >
      <label
        for="the-input"
      >
        <span
          class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <span
            class="c1"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c2"
  >
    <input
      aria-invalid="false"
      class="c3"
      id="the-input"
      type="text"
    />
    <div
      class="c4"
    >
      <div
        style="transition:opacity 100ms ease-in-out;opacity:1"
      >
        <div
          class="c5"
        >
          <i
            class="c6"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Input label can have a short hint 1`] = `
Object {
  "blur": [Function],
  "changeValueTo": [Function],
  "findFeedbackIconFade": [Function],
  "findHelper": [Function],
  "findInputElement": [Function],
  "focus": [Function],
  "input": .c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c4 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 1rem;
}

.c4::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::-webkit-inner-spin-button,
.c4::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c4:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c5 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c3 {
  position: relative;
}

<Input
    hint="The short hint"
    hintPosition="inline"
    id="the-id"
    label="The input"
    type="text"
  >
    <Box
      between={2}
      inline={false}
      tag="div"
    >
      <div
        className="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
      >
        <div>
          <Box
            between="space-between"
            inline={true}
            tag="div"
          >
            <div
              className="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
            >
              <label
                htmlFor="the-id"
              >
                <Styled(Box)
                  between={2}
                  inline={true}
                  tag="span"
                >
                  <StyledComponent
                    between={2}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c0",
                          "rules": Array [
                            "align-items: center;",
                          ],
                        },
                        "displayName": "Styled(Box)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    inline={true}
                    tag="span"
                  >
                    <Box
                      between={2}
                      className="c0"
                      inline={true}
                      tag="span"
                    >
                      <span
                        className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
                      >
                        <Text
                          block={false}
                          bold={true}
                          invert={false}
                          size="medium"
                        >
                          <Text__StyledText
                            block={false}
                            bold={true}
                            invert={false}
                            size="medium"
                          >
                            <StyledComponent
                              block={false}
                              bold={true}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Text__StyledText-sc-1m0rr67-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                      [Function],
                                      [Function],
                                      "sup {",
                                      "top: -0.5em;",
                                      "font-size: 0.875rem;",
                                      "position: relative;",
                                      "vertical-align: baseline;",
                                      "padding-left: 0.1em;",
                                      "}",
                                    ],
                                  },
                                  "displayName": "Text__StyledText",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              invert={false}
                              size="medium"
                            >
                              <span
                                className="c1"
                                size="medium"
                              >
                                The input
                              </span>
                            </StyledComponent>
                          </Text__StyledText>
                        </Text>
                        <Text
                          block={false}
                          bold={false}
                          invert={false}
                          size="small"
                        >
                          <Text__StyledText
                            block={false}
                            bold={false}
                            invert={false}
                            size="small"
                          >
                            <StyledComponent
                              block={false}
                              bold={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Text__StyledText-sc-1m0rr67-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                      [Function],
                                      [Function],
                                      [Function],
                                      [Function],
                                      "sup {",
                                      "top: -0.5em;",
                                      "font-size: 0.875rem;",
                                      "position: relative;",
                                      "vertical-align: baseline;",
                                      "padding-left: 0.1em;",
                                      "}",
                                    ],
                                  },
                                  "displayName": "Text__StyledText",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              invert={false}
                              size="small"
                            >
                              <span
                                className="c2"
                                size="small"
                              >
                                The short hint
                              </span>
                            </StyledComponent>
                          </Text__StyledText>
                        </Text>
                      </span>
                    </Box>
                  </StyledComponent>
                </Styled(Box)>
              </label>
            </div>
          </Box>
        </div>
        <styled.div
          _css={
            Object {
              "position": "relative",
            }
          }
        >
          <StyledComponent
            _css={
              Object {
                "position": "relative",
              }
            }
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "c3",
                  "rules": Array [
                    [Function],
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c3"
            >
              <Input__StyledInput
                aria-invalid={false}
                id="the-id"
                onBlur={[Function]}
                onFocus={[Function]}
                type="text"
              >
                <StyledComponent
                  aria-invalid={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Input__StyledInput-sc-8rmijy-0",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          "width: 100%;",
                          "margin: 0;",
                          "outline: 0;",
                          "text-overflow: ellipsis;",
                          "border-color: #54595f;",
                          "&::placeholder {",
                          "font: inherit;",
                          "letter-spacing: inherit;",
                          "line-height: inherit;",
                          "color: #54595f;",
                          "}",
                          "border-width: 1px;",
                          "border-style: solid;",
                          "border-radius: 4px;",
                          "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                          "word-wrap: break-word;",
                          "font-size: 1rem;",
                          "letter-spacing: -0.8px;",
                          "line-height: 1.5;",
                          "font-weight: 400;",
                          "color: #2a2c2e;",
                          [Function],
                          "&:focus {",
                          "border-color: transparent;",
                          "box-shadow: 0 0 4px 1px #54595f;",
                          "background-color: #fff;",
                          "}",
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "Input__StyledInput",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Input__StyledInput-sc-8rmijy-0",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  id="the-id"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  type="text"
                >
                  <input
                    aria-invalid={false}
                    className="c4"
                    id="the-id"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    type="text"
                  />
                </StyledComponent>
              </Input__StyledInput>
              <Input__StyledFeedbackIcon>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Input__StyledFeedbackIcon-sc-8rmijy-1",
                        "isStatic": true,
                        "lastClassName": "c5",
                        "rules": Array [
                          "right: 1rem;",
                          "position: absolute;",
                          "top: 50%;",
                          "transform: translateY(-50%);",
                        ],
                      },
                      "displayName": "Input__StyledFeedbackIcon",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Input__StyledFeedbackIcon-sc-8rmijy-1",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <div
                    className="c5"
                  >
                    <FeedbackIcon
                      showIcon={false}
                    >
                      <Fade
                        in={false}
                        mountOnEnter={true}
                        timeout={100}
                        unmountOnExit={true}
                      >
                        <Transition
                          appear={false}
                          enter={true}
                          exit={true}
                          in={false}
                          mountOnEnter={true}
                          onEnter={[Function]}
                          onEntered={[Function]}
                          onEntering={[Function]}
                          onExit={[Function]}
                          onExited={[Function]}
                          onExiting={[Function]}
                          timeout={100}
                          unmountOnExit={true}
                        />
                      </Fade>
                    </FeedbackIcon>
                  </div>
                </StyledComponent>
              </Input__StyledFeedbackIcon>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </Box>
  </Input>,
  "label": .c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
    htmlFor="the-id"
  >
    <Styled(Box)
      between={2}
      inline={true}
      tag="span"
    >
      <StyledComponent
        between={2}
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "lastClassName": "c0",
              "rules": Array [
                "align-items: center;",
              ],
            },
            "displayName": "Styled(Box)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        inline={true}
        tag="span"
      >
        <Box
          between={2}
          className="c0"
          inline={true}
          tag="span"
        >
          <span
            className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
          >
            <Text
              block={false}
              bold={true}
              invert={false}
              size="medium"
            >
              <Text__StyledText
                block={false}
                bold={true}
                invert={false}
                size="medium"
              >
                <StyledComponent
                  block={false}
                  bold={true}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Text__StyledText-sc-1m0rr67-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          "sup {",
                          "top: -0.5em;",
                          "font-size: 0.875rem;",
                          "position: relative;",
                          "vertical-align: baseline;",
                          "padding-left: 0.1em;",
                          "}",
                        ],
                      },
                      "displayName": "Text__StyledText",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  invert={false}
                  size="medium"
                >
                  <span
                    className="c1"
                    size="medium"
                  >
                    The input
                  </span>
                </StyledComponent>
              </Text__StyledText>
            </Text>
            <Text
              block={false}
              bold={false}
              invert={false}
              size="small"
            >
              <Text__StyledText
                block={false}
                bold={false}
                invert={false}
                size="small"
              >
                <StyledComponent
                  block={false}
                  bold={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Text__StyledText-sc-1m0rr67-0",
                        "isStatic": false,
                        "lastClassName": "c2",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          "sup {",
                          "top: -0.5em;",
                          "font-size: 0.875rem;",
                          "position: relative;",
                          "vertical-align: baseline;",
                          "padding-left: 0.1em;",
                          "}",
                        ],
                      },
                      "displayName": "Text__StyledText",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  invert={false}
                  size="small"
                >
                  <span
                    className="c2"
                    size="small"
                  >
                    The short hint
                  </span>
                </StyledComponent>
              </Text__StyledText>
            </Text>
          </span>
        </Box>
      </StyledComponent>
    </Styled(Box)>
  </label>,
}
`;

exports[`Input renders 1`] = `
.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 1rem;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c4 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c2 {
  position: relative;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div>
    <div
      class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
    >
      <label
        for="the-input"
      >
        <span
          class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <span
            class="c1"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c2"
  >
    <input
      aria-invalid="false"
      class="c3"
      id="the-input"
      type="text"
    />
    <div
      class="c4"
    />
  </div>
</div>
`;

exports[`Input renders with a feedback state and icon 1`] = `
.c6 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c6::before {
  content: '\\f103';
}

.c1 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c5 {
  line-height: 1;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c3 {
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 1rem;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c3:not(:focus) {
  border-color: #c12335;
}

.c4 {
  right: 1rem;
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

.c2 {
  position: relative;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div>
    <div
      class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
    >
      <label
        for="the-input"
      >
        <span
          class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <span
            class="c1"
          >
            The input
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c2"
  >
    <input
      aria-invalid="true"
      class="c3"
      id="the-input"
      type="text"
    />
    <div
      class="c4"
    >
      <div
        style="transition:opacity 100ms ease-in-out;opacity:1"
      >
        <div
          class="c5"
        >
          <i
            class="c6"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
