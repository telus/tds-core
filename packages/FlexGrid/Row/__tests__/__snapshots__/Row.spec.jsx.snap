// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Row alignment can align columns horizontally to the start, center, or end 1`] = `
.c0 {
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  text-align: left;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  horizontalAlign="start"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    horizontalAlign="start"
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can align columns horizontally to the start, center, or end 2`] = `
.c0 {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  text-align: center;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  horizontalAlign="center"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    horizontalAlign="center"
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can align columns horizontally to the start, center, or end 3`] = `
.c0 {
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  justify-content: flex-end;
  text-align: right;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  horizontalAlign="end"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    horizontalAlign="end"
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can align columns vertically to the top, middle, or bottom 1`] = `
.c0 {
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
  verticalAlign="top"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
    verticalAlign="top"
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can align columns vertically to the top, middle, or bottom 2`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
  verticalAlign="middle"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
    verticalAlign="middle"
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can align columns vertically to the top, middle, or bottom 3`] = `
.c0 {
  -webkit-align-items: flex-end;
  -webkit-box-align: flex-end;
  -ms-flex-align: flex-end;
  align-items: flex-end;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
  verticalAlign="bottom"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
    verticalAlign="bottom"
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row alignment can be horizontally and vertically aligned 1`] = `
.c0 {
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  text-align: left;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  horizontalAlign="start"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
  verticalAlign="top"
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    horizontalAlign="start"
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
    verticalAlign="top"
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row can distribute columns around or between 1`] = `
.c0 {
  -webkit-box-pack: space-around;
  -webkit-justify-content: space-around;
  -ms-flex-pack: space-around;
  justify-content: space-around;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  distribute="around"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    distribute="around"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row can distribute columns around or between 2`] = `
.c0 {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  distribute="between"
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    distribute="between"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row renders 1`] = `
.c0 {
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

<Row__StyledRow
  reverseLevel={
    Array [
      false,
      false,
      false,
      false,
      false,
    ]
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        false,
        false,
        false,
        false,
        false,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;

exports[`Row supports responsive reversal 1`] = `
.c0 {
  width: 100%;
  margin: 0 auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

@media (max-width:575px) {
  .c0 {
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}

@media (min-width:576px) {
  .c0 {
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}

@media (min-width:768px) {
  .c0 {
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}

@media (min-width:992px) {
  .c0 {
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    flex-direction: row;
  }
}

@media (min-width:1200px) {
  .c0 {
    -webkit-flex-direction: row-reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
  }
}

<Row__StyledRow
  reverseLevel={
    Array [
      true,
      true,
      true,
      false,
      true,
    ]
  }
>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Row__StyledRow-sc-1goz0ht-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
        },
        "displayName": "Row__StyledRow",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Row__StyledRow-sc-1goz0ht-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
    reverseLevel={
      Array [
        true,
        true,
        true,
        false,
        true,
      ]
    }
  >
    <div
      className="c0"
    >
      Some content
    </div>
  </StyledComponent>
</Row__StyledRow>
`;
