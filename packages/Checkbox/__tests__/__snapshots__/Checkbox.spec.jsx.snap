// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox allows numbers as value 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c4 > *:not(:last-child) {
  margin-right: 1rem;
}

.c7 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c7::before {
  content: '\\f101';
}

.c8 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c8 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c6 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c6 > i {
  display: none;
}

.c2 {
  position: absolute;
  width: 1.2rem;
  height: 1.2rem;
  margin: 2px 1px;
  opacity: 0;
  pointer-events: none;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  cursor: pointer;
}

.c1:focus ~ .c3 > div > .c5 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c1:checked ~ .c3 > div > .c5 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c1:checked ~ .c3 > div > .c5 > i {
  display: block;
}

.c1:disabled ~ .c3 > div > .c5 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c1:disabled ~ .c3 > div > div {
  color: #d8d8d8;
}

<div
  class="c0"
>
  <input
    aria-invalid="false"
    class="c1 c2"
    data-testid="hidden-input"
    id="the-group-name_1"
    name="the-group-name"
    type="checkbox"
    value="1"
  />
  <label
    class="c3"
    data-testid="checkbox-label"
    for="the-group-name_1"
  >
    <div
      class="c4"
    >
      <span
        class="c5 c6"
        data-testid="fake-input"
      >
        <i
          aria-hidden="true"
          class="c7"
        />
      </span>
      <div
        class=""
      >
        <span
          class="c8"
        >
          A label
        </span>
      </div>
    </div>
  </label>
</div>
`;

exports[`Checkbox disabled can be disabled 1`] = `
.c0 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c0 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

<ColoredTextProvider
  className=""
  isError={false}
  tag="div"
>
  <div
    className=""
  >
    <Text
      block={false}
      bold={false}
      invert={false}
      size="base"
    >
      <Text__StyledText
        block={false}
        bold={false}
        inheritColor={true}
        invert={false}
        size="base"
      >
        <StyledComponent
          block={false}
          bold={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Text__StyledText-sc-1m0rr67-0",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  "sup {",
                  "top: -0.5em;",
                  "font-size: 0.875rem;",
                  "position: relative;",
                  "vertical-align: baseline;",
                  "padding-left: 0.1em;",
                  "}",
                ],
              },
              "displayName": "Text__StyledText",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inheritColor={true}
          invert={false}
          size="base"
        >
          <span
            className="c0"
            size="base"
          >
            A label
          </span>
        </StyledComponent>
      </Text__StyledText>
    </Text>
  </div>
</ColoredTextProvider>
`;

exports[`Checkbox disabled can be disabled 2`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox disabled can be disabled and checked 1`] = `
.c0 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c0 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

<ColoredTextProvider
  className=""
  isError={false}
  tag="div"
>
  <div
    className=""
  >
    <Text
      block={false}
      bold={false}
      invert={false}
      size="base"
    >
      <Text__StyledText
        block={false}
        bold={false}
        inheritColor={true}
        invert={false}
        size="base"
      >
        <StyledComponent
          block={false}
          bold={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Text__StyledText-sc-1m0rr67-0",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  "sup {",
                  "top: -0.5em;",
                  "font-size: 0.875rem;",
                  "position: relative;",
                  "vertical-align: baseline;",
                  "padding-left: 0.1em;",
                  "}",
                ],
              },
              "displayName": "Text__StyledText",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inheritColor={true}
          invert={false}
          size="base"
        >
          <span
            className="c0"
            size="base"
          >
            A label
          </span>
        </StyledComponent>
      </Text__StyledText>
    </Text>
  </div>
</ColoredTextProvider>
`;

exports[`Checkbox disabled can be disabled and checked 2`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox error can have an error feedback state 1`] = `
.c1 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  color: #c12335;
}

<ColoredTextProvider
  className="c0"
  isError={true}
  tag="div"
>
  <div
    className="c0"
  >
    <Text
      block={false}
      bold={false}
      invert={false}
      size="base"
    >
      <Text__StyledText
        block={false}
        bold={false}
        inheritColor={true}
        invert={false}
        size="base"
      >
        <StyledComponent
          block={false}
          bold={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Text__StyledText-sc-1m0rr67-0",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  "sup {",
                  "top: -0.5em;",
                  "font-size: 0.875rem;",
                  "position: relative;",
                  "vertical-align: baseline;",
                  "padding-left: 0.1em;",
                  "}",
                ],
              },
              "displayName": "Text__StyledText",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inheritColor={true}
          invert={false}
          size="base"
        >
          <span
            className="c1"
            size="base"
          >
            Some error
          </span>
        </StyledComponent>
      </Text__StyledText>
    </Text>
  </div>
</ColoredTextProvider>
`;

exports[`Checkbox error can have an error feedback state 2`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox error can have an error message 1`] = `
.c1 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c1 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  color: #c12335;
}

<ColoredTextProvider
  className="c0"
  isError={true}
  tag="div"
>
  <div
    className="c0"
  >
    <Text
      block={false}
      bold={false}
      invert={false}
      size="base"
    >
      <Text__StyledText
        block={false}
        bold={false}
        inheritColor={true}
        invert={false}
        size="base"
      >
        <StyledComponent
          block={false}
          bold={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Text__StyledText-sc-1m0rr67-0",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  "sup {",
                  "top: -0.5em;",
                  "font-size: 0.875rem;",
                  "position: relative;",
                  "vertical-align: baseline;",
                  "padding-left: 0.1em;",
                  "}",
                ],
              },
              "displayName": "Text__StyledText",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inheritColor={true}
          invert={false}
          size="base"
        >
          <span
            className="c1"
            size="base"
          >
            Some error
          </span>
        </StyledComponent>
      </Text__StyledText>
    </Text>
  </div>
</ColoredTextProvider>
`;

exports[`Checkbox error can have an error message 2`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox error can have an error message 3`] = `
.c1 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 1rem;
  padding-bottom: 1rem;
  padding-left: 1rem;
  padding-right: 1rem;
}

.c0 {
  border-radius: 4px;
  background-color: #fff6f8;
}

.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  padding: 0;
  margin: 0;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
  text-align: left;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

<InputFeedback
  feedback="error"
  id="the-group-namethe-value_error-message"
>
  <Styled(Component)
    feedback="error"
    id="the-group-namethe-value_error-message"
    inset={3}
    role="alert"
  >
    <StyledComponent
      feedback="error"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              [Function],
            ],
          },
          "displayName": "Styled(Component)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      id="the-group-namethe-value_error-message"
      inset={3}
      role="alert"
    >
      <Component
        className="c0"
        feedback="error"
        id="the-group-namethe-value_error-message"
        inset={3}
        role="alert"
      >
        <Box
          className="c0"
          id="the-group-namethe-value_error-message"
          inline={false}
          inset={3}
          role="alert"
          tag="div"
        >
          <styled.div
            className="c0"
            id="the-group-namethe-value_error-message"
            inline={false}
            inset={3}
            role="alert"
            tag="div"
          >
            <StyledComponent
              className="c0"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [
                    [Function],
                  ],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bdVaJa",
                    "isStatic": false,
                    "lastClassName": "LKvBy",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bdVaJa",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              id="the-group-namethe-value_error-message"
              inline={false}
              inset={3}
              role="alert"
              tag="div"
            >
              <div
                className="c0 sc-bwzfXH c0 c1"
                id="the-group-namethe-value_error-message"
                role="alert"
              >
                <Paragraph
                  align="left"
                  bold={false}
                  invert={false}
                  size="small"
                >
                  <Paragraph__StyledParagraph
                    align="left"
                    bold={false}
                    invert={false}
                    size="small"
                  >
                    <StyledComponent
                      align="left"
                      bold={false}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Paragraph__StyledParagraph-efl81j-0",
                            "isStatic": false,
                            "lastClassName": "c2",
                            "rules": Array [
                              [Function],
                              "word-wrap: break-word;",
                              "padding: 0;",
                              "margin: 0;",
                              [Function],
                              [Function],
                              [Function],
                              [Function],
                              "sup {",
                              "top: -0.5em;",
                              "font-size: 0.875rem;",
                              "position: relative;",
                              "vertical-align: baseline;",
                              "padding-left: 0.1em;",
                              "}",
                            ],
                          },
                          "displayName": "Paragraph__StyledParagraph",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Paragraph__StyledParagraph-efl81j-0",
                          "target": "p",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      invert={false}
                      size="small"
                    >
                      <p
                        className="c2"
                        size="small"
                      >
                        Error message
                      </p>
                    </StyledComponent>
                  </Paragraph__StyledParagraph>
                </Paragraph>
              </div>
            </StyledComponent>
          </styled.div>
        </Box>
      </Component>
    </StyledComponent>
  </Styled(Component)>
</InputFeedback>
`;

exports[`Checkbox error does not appear as an error when it is checked 1`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c5:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c5:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c4 div > .c0 {
  border-color: #c12335;
}

.c5:focus ~ .c4 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #c12335;
}

.c5:checked ~ .c4 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c5:checked ~ .c4 > div > .c0 > i {
  display: block;
}

.c5:disabled ~ .c4 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox focusing can be focused and unfocused 1`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox focusing can be focused and unfocused 2`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox has a fake checkbox 1`] = `
Array [
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<Checkbox__FakeCheckbox
    data-testid="fake-input"
  >
    <StyledComponent
      data-testid="fake-input"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "c0",
            "isStatic": true,
            "lastClassName": "c1",
            "rules": Array [
              "height: 1.25rem;",
              "width: 1.25rem;",
              "min-height: 1.25rem;",
              "min-width: 1.25rem;",
              "outline: 0;",
              "line-height: 0;",
              "display: flex;",
              "align-items: center;",
              "justify-content: center;",
              "cursor: pointer;",
              "margin-top: 0.125rem;",
              "transition: border-color 0.1s linear, background-color 0.1s linear;",
              "border-width: 1px;",
              "border-style: solid;",
              "border-radius: 4px;",
              "border-color: #54595f;",
              "background-color: #fff;",
              "& > i {",
              "display: none;",
              "}",
            ],
          },
          "displayName": "Checkbox__FakeCheckbox",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "c0",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="c0 c1"
        data-testid="fake-input"
      >
        <DecorativeIcon
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon
            aria-hidden="true"
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon__StyledIcon
              aria-hidden="true"
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <StyledComponent
                aria-hidden="true"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "isStatic": false,
                      "lastClassName": "c2",
                      "rules": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                    },
                    "displayName": "Icon__StyledIcon",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <i
                  aria-hidden="true"
                  className="c2"
                />
              </StyledComponent>
            </Icon__StyledIcon>
          </Icon>
        </DecorativeIcon>
      </span>
    </StyledComponent>
  </Checkbox__FakeCheckbox>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<StyledComponent
    data-testid="fake-input"
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "c0",
          "isStatic": true,
          "lastClassName": "c1",
          "rules": Array [
            "height: 1.25rem;",
            "width: 1.25rem;",
            "min-height: 1.25rem;",
            "min-width: 1.25rem;",
            "outline: 0;",
            "line-height: 0;",
            "display: flex;",
            "align-items: center;",
            "justify-content: center;",
            "cursor: pointer;",
            "margin-top: 0.125rem;",
            "transition: border-color 0.1s linear, background-color 0.1s linear;",
            "border-width: 1px;",
            "border-style: solid;",
            "border-radius: 4px;",
            "border-color: #54595f;",
            "background-color: #fff;",
            "& > i {",
            "display: none;",
            "}",
          ],
        },
        "displayName": "Checkbox__FakeCheckbox",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "c0",
        "target": "span",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <span
      className="c0 c1"
      data-testid="fake-input"
    >
      <DecorativeIcon
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon
          aria-hidden="true"
          size={16}
          symbol="checkmark"
          variant="inverted"
        >
          <Icon__StyledIcon
            aria-hidden="true"
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <StyledComponent
              aria-hidden="true"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                  },
                  "displayName": "Icon__StyledIcon",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "target": "i",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              iSize={16}
              symbol="checkmark"
              variant="inverted"
            >
              <i
                aria-hidden="true"
                className="c2"
              />
            </StyledComponent>
          </Icon__StyledIcon>
        </Icon>
      </DecorativeIcon>
    </span>
  </StyledComponent>,
  .c2 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c2::before {
  content: '\\f101';
}

.c1 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c1 > i {
  display: none;
}

.c4:focus ~ .c3 > div > .c0 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c4:checked ~ .c3 > div > .c0 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c4:checked ~ .c3 > div > .c0 > i {
  display: block;
}

.c4:disabled ~ .c3 > div > .c0 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<span
    className="c0 c1"
    data-testid="fake-input"
  >
    <DecorativeIcon
      size={16}
      symbol="checkmark"
      variant="inverted"
    >
      <Icon
        aria-hidden="true"
        size={16}
        symbol="checkmark"
        variant="inverted"
      >
        <Icon__StyledIcon
          aria-hidden="true"
          iSize={16}
          symbol="checkmark"
          variant="inverted"
        >
          <StyledComponent
            aria-hidden="true"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "Icon__StyledIcon",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                "target": "i",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            iSize={16}
            symbol="checkmark"
            variant="inverted"
          >
            <i
              aria-hidden="true"
              className="c2"
            />
          </StyledComponent>
        </Icon__StyledIcon>
      </Icon>
    </DecorativeIcon>
  </span>,
]
`;

exports[`Checkbox must have a label 1`] = `
Array [
  .c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c0 > *:not(:last-child) {
  margin-right: 1rem;
}

.c3 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c3::before {
  content: '\\f101';
}

.c4 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c4 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c2 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c2 > i {
  display: none;
}

.c6:focus ~ .c5 > div > .c1 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c6:checked ~ .c5 > div > .c1 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c6:checked ~ .c5 > div > .c1 > i {
  display: block;
}

.c6:disabled ~ .c5 > div > .c1 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

<div
    className="c0"
  >
    <Checkbox__FakeCheckbox
      data-testid="fake-input"
    >
      <StyledComponent
        data-testid="fake-input"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "c1",
              "isStatic": true,
              "lastClassName": "c2",
              "rules": Array [
                "height: 1.25rem;",
                "width: 1.25rem;",
                "min-height: 1.25rem;",
                "min-width: 1.25rem;",
                "outline: 0;",
                "line-height: 0;",
                "display: flex;",
                "align-items: center;",
                "justify-content: center;",
                "cursor: pointer;",
                "margin-top: 0.125rem;",
                "transition: border-color 0.1s linear, background-color 0.1s linear;",
                "border-width: 1px;",
                "border-style: solid;",
                "border-radius: 4px;",
                "border-color: #54595f;",
                "background-color: #fff;",
                "& > i {",
                "display: none;",
                "}",
              ],
            },
            "displayName": "Checkbox__FakeCheckbox",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "c1",
            "target": "span",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <span
          className="c1 c2"
          data-testid="fake-input"
        >
          <DecorativeIcon
            size={16}
            symbol="checkmark"
            variant="inverted"
          >
            <Icon
              aria-hidden="true"
              size={16}
              symbol="checkmark"
              variant="inverted"
            >
              <Icon__StyledIcon
                aria-hidden="true"
                iSize={16}
                symbol="checkmark"
                variant="inverted"
              >
                <StyledComponent
                  aria-hidden="true"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "Icon__StyledIcon",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                      "target": "i",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  iSize={16}
                  symbol="checkmark"
                  variant="inverted"
                >
                  <i
                    aria-hidden="true"
                    className="c3"
                  />
                </StyledComponent>
              </Icon__StyledIcon>
            </Icon>
          </DecorativeIcon>
        </span>
      </StyledComponent>
    </Checkbox__FakeCheckbox>
    <Styled(ColoredTextProvider)
      isError={false}
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": false,
              "lastClassName": "KtFsv",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Styled(ColoredTextProvider)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        isError={false}
      >
        <ColoredTextProvider
          className=""
          isError={false}
          tag="div"
        >
          <div
            className=""
          >
            <Text
              block={false}
              bold={false}
              invert={false}
              size="base"
            >
              <Text__StyledText
                block={false}
                bold={false}
                inheritColor={true}
                invert={false}
                size="base"
              >
                <StyledComponent
                  block={false}
                  bold={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Text__StyledText-sc-1m0rr67-0",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          "sup {",
                          "top: -0.5em;",
                          "font-size: 0.875rem;",
                          "position: relative;",
                          "vertical-align: baseline;",
                          "padding-left: 0.1em;",
                          "}",
                        ],
                      },
                      "displayName": "Text__StyledText",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  inheritColor={true}
                  invert={false}
                  size="base"
                >
                  <span
                    className="c4"
                    size="base"
                  >
                    Some label
                  </span>
                </StyledComponent>
              </Text__StyledText>
            </Text>
          </div>
        </ColoredTextProvider>
      </StyledComponent>
    </Styled(ColoredTextProvider)>
  </div>,
  .c0 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c0 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

<div
    className=""
  >
    <Text
      block={false}
      bold={false}
      invert={false}
      size="base"
    >
      <Text__StyledText
        block={false}
        bold={false}
        inheritColor={true}
        invert={false}
        size="base"
      >
        <StyledComponent
          block={false}
          bold={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Text__StyledText-sc-1m0rr67-0",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                  "sup {",
                  "top: -0.5em;",
                  "font-size: 0.875rem;",
                  "position: relative;",
                  "vertical-align: baseline;",
                  "padding-left: 0.1em;",
                  "}",
                ],
              },
              "displayName": "Text__StyledText",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          inheritColor={true}
          invert={false}
          size="base"
        >
          <span
            className="c0"
            size="base"
          >
            Some label
          </span>
        </StyledComponent>
      </Text__StyledText>
    </Text>
  </div>,
]
`;

exports[`Checkbox renders 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c4 > *:not(:last-child) {
  margin-right: 1rem;
}

.c7 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #fff;
  font-size: 1rem;
}

.c7::before {
  content: '\\f101';
}

.c8 {
  color: #2a2c2e;
  color: inherit;
  word-wrap: break-word;
  font-size: inherit;
  font-weight: inherit;
}

.c8 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c6 {
  height: 1.25rem;
  width: 1.25rem;
  min-height: 1.25rem;
  min-width: 1.25rem;
  outline: 0;
  line-height: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  cursor: pointer;
  margin-top: 0.125rem;
  -webkit-transition: border-color 0.1s linear,background-color 0.1s linear;
  transition: border-color 0.1s linear,background-color 0.1s linear;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  border-color: #54595f;
  background-color: #fff;
}

.c6 > i {
  display: none;
}

.c2 {
  position: absolute;
  width: 1.2rem;
  height: 1.2rem;
  margin: 2px 1px;
  opacity: 0;
  pointer-events: none;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  cursor: pointer;
}

.c1:focus ~ .c3 > div > .c5 {
  box-shadow: 0 0 4px 1px #54595f;
  border-color: #fff;
}

.c1:checked ~ .c3 > div > .c5 {
  background-color: #2B8000;
  border-color: #2B8000;
}

.c1:checked ~ .c3 > div > .c5 > i {
  display: block;
}

.c1:disabled ~ .c3 > div > .c5 {
  background-color: #d8d8d8;
  border-color: #d8d8d8;
}

.c1:disabled ~ .c3 > div > div {
  color: #d8d8d8;
}

<div
  class="c0"
>
  <input
    aria-invalid="false"
    class="c1 c2"
    data-testid="hidden-input"
    id="the-group-name_the-value"
    name="the-group-name"
    type="checkbox"
    value="the-value"
  />
  <label
    class="c3"
    data-testid="checkbox-label"
    for="the-group-name_the-value"
  >
    <div
      class="c4"
    >
      <span
        class="c5 c6"
        data-testid="fake-input"
      >
        <i
          aria-hidden="true"
          class="c7"
        />
      </span>
      <div
        class=""
      >
        <span
          class="c8"
        >
          A label
        </span>
      </div>
    </div>
  </label>
</div>
`;
