// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select can have an error message 1`] = `
.c7 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c7::before {
  content: '\\f103';
}

.c9 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c9::before {
  content: '\\f105';
}

.c1 {
  border-radius: 4px;
  background-color: #fff6f8;
}

.c6 {
  line-height: 1;
}

.c3 {
  background-color: #fff;
  position: relative;
}

.c4 {
  height: 3.25rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c4::-ms-expand {
  display: none;
}

.c4::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c4::-webkit-inner-spin-button,
.c4::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c4:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c4:not(:focus) {
  border-color: #c12335;
}

.c5 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c8 {
  line-height: 1;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c2 {
  position: relative;
}

<Select
  defaultValue=""
  error="Oh no a terrible error!"
  feedback="error"
  id="some-id"
  label="The select"
  options={
    Array [
      Object {
        "readOnly": true,
        "text": "text one",
        "value": "value-1",
      },
      Object {
        "readOnly": true,
        "text": "text two",
        "value": "value-2",
      },
    ]
  }
>
  <Box
    between={2}
    inline={false}
    tag="div"
  >
    <div
      className="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
    >
      <Box
        between="space-between"
        inline={true}
        tag="div"
      >
        <div
          className="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
        >
          <label
            htmlFor="some-id"
          >
            <Styled(Box)
              between={2}
              inline={true}
              tag="span"
            >
              <StyledComponent
                between={2}
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-EHOje",
                      "isStatic": true,
                      "lastClassName": "c0",
                      "rules": Array [
                        "align-items: center;",
                      ],
                    },
                    "displayName": "Styled(Box)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-EHOje",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                inline={true}
                tag="span"
              >
                <Box
                  between={2}
                  className="c0"
                  inline={true}
                  tag="span"
                >
                  <span
                    className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
                  >
                    <Text
                      block={false}
                      bold={true}
                      data-testid="selectLabel"
                      invert={false}
                      size="medium"
                    >
                      <span
                        className="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__boldFont___2YS3O TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__color___2CNH8"
                        data-testid="selectLabel"
                      >
                        The select
                      </span>
                    </Text>
                  </span>
                </Box>
              </StyledComponent>
            </Styled(Box)>
          </label>
        </div>
      </Box>
      <InputFeedback
        feedback="error"
        id="some-id_error-message"
      >
        <Styled(Component)
          feedback="error"
          id="some-id_error-message"
          inset={3}
          role="alert"
        >
          <StyledComponent
            feedback="error"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    [Function],
                  ],
                },
                "displayName": "Styled(Component)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="some-id_error-message"
            inset={3}
            role="alert"
          >
            <Component
              className="c1"
              feedback="error"
              id="some-id_error-message"
              inset={3}
              role="alert"
            >
              <Box
                className="c1"
                id="some-id_error-message"
                inline={false}
                inset={3}
                role="alert"
                tag="div"
              >
                <div
                  className="TDS_Box-modules__horizontalPadding-3___2uoUp TDS_Box-modules__verticalPadding-3___Fsv37 c1"
                  id="some-id_error-message"
                  role="alert"
                >
                  <Paragraph
                    align="left"
                    bold={false}
                    invert={false}
                    size="small"
                  >
                    <p
                      className="TDS_Typography-modules__wordBreak___3OZx_ TDS_Spacing-modules__noSpacing___XPYDG TDS_Typography-modules__color___2CNH8 TDS_Typography-modules__small___mt5lS TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__smallFont___3S6nz TDS_Paragraph-modules__leftAlign___KgwhE TDS_Typography-modules__default___KlcpP"
                    >
                      Oh no a terrible error!
                    </p>
                  </Paragraph>
                </div>
              </Box>
            </Component>
          </StyledComponent>
        </Styled(Component)>
      </InputFeedback>
      <styled.div
        _css={
          Object {
            "position": "relative",
          }
        }
      >
        <StyledComponent
          _css={
            Object {
              "position": "relative",
            }
          }
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bZQynM",
                "isStatic": false,
                "lastClassName": "c2",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bZQynM",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c2"
          >
            <Select__SelectWrapper>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Select__SelectWrapper-sc-1kajzpi-0",
                      "isStatic": true,
                      "lastClassName": "c3",
                      "rules": Array [
                        "background-color: #fff;",
                        "position: relative;",
                      ],
                    },
                    "displayName": "Select__SelectWrapper",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Select__SelectWrapper-sc-1kajzpi-0",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c3"
                >
                  <Select__StyledSelect
                    aria-describedby="some-id_error-message"
                    aria-invalid={true}
                    defaultValue=""
                    feedback="error"
                    id="some-id"
                    onBlur={[Function]}
                    onFocus={[Function]}
                  >
                    <StyledComponent
                      aria-describedby="some-id_error-message"
                      aria-invalid={true}
                      defaultValue=""
                      feedback="error"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Select__StyledSelect-sc-1kajzpi-1",
                            "isStatic": false,
                            "lastClassName": "c4",
                            "rules": Array [
                              "height: 3.25rem;",
                              "appearance: none;",
                              "&::-ms-expand {",
                              "display: none;",
                              "}",
                              "width: 100%;",
                              "margin: 0;",
                              "outline: 0;",
                              "text-overflow: ellipsis;",
                              "border-color: #54595f;",
                              "background-color: #fff;",
                              "&::placeholder {",
                              "font: inherit;",
                              "letter-spacing: inherit;",
                              "line-height: inherit;",
                              "color: #54595f;",
                              "}",
                              [Function],
                              "border-width: 1px;",
                              "border-style: solid;",
                              "border-radius: 4px;",
                              "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                              "word-wrap: break-word;",
                              "font-size: 1rem;",
                              "letter-spacing: -0.8px;",
                              "line-height: 1.5;",
                              "font-weight: 400;",
                              "color: #2a2c2e;",
                              [Function],
                              "&:focus {",
                              "border-color: transparent;",
                              "box-shadow: 0 0 4px 1px #54595f;",
                              "background-color: #fff;",
                              "}",
                              [Function],
                              [Function],
                            ],
                          },
                          "displayName": "Select__StyledSelect",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Select__StyledSelect-sc-1kajzpi-1",
                          "target": "select",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      id="some-id"
                      onBlur={[Function]}
                      onFocus={[Function]}
                    >
                      <select
                        aria-describedby="some-id_error-message"
                        aria-invalid={true}
                        className="c4"
                        defaultValue=""
                        id="some-id"
                        onBlur={[Function]}
                        onFocus={[Function]}
                      >
                        <option
                          key="value-1"
                          value="value-1"
                        >
                          text one
                        </option>
                        <option
                          key="value-2"
                          value="value-2"
                        >
                          text two
                        </option>
                      </select>
                    </StyledComponent>
                  </Select__StyledSelect>
                  <Styled(Box)
                    between={3}
                    inline={true}
                  >
                    <StyledComponent
                      between={3}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": true,
                            "lastClassName": "c5",
                            "rules": Array [
                              "position: absolute;",
                              "top: 50%;",
                              "transform: translateY(-50%);",
                              "right: 1rem;",
                              "pointer-events: none;",
                            ],
                          },
                          "displayName": "Styled(Box)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inline={true}
                    >
                      <Box
                        between={3}
                        className="c5"
                        inline={true}
                        tag="div"
                      >
                        <div
                          className="TDS_Box-modules__betweenRightMargin-3___1dOvx TDS_Box-modules__inline___jTHcz c5"
                        >
                          <FeedbackIcon
                            feedback="error"
                            showIcon={true}
                          >
                            <Fade
                              in={true}
                              mountOnEnter={true}
                              timeout={100}
                              unmountOnExit={true}
                            >
                              <Transition
                                appear={false}
                                enter={true}
                                exit={true}
                                in={true}
                                mountOnEnter={true}
                                onEnter={[Function]}
                                onEntered={[Function]}
                                onEntering={[Function]}
                                onExit={[Function]}
                                onExited={[Function]}
                                onExiting={[Function]}
                                timeout={100}
                                unmountOnExit={true}
                              >
                                <div
                                  style={
                                    Object {
                                      "opacity": 1,
                                      "transition": "opacity 100ms ease-in-out",
                                    }
                                  }
                                >
                                  <FeedbackIcon__StyledIcon>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "FeedbackIcon__StyledIcon-yxz8rh-0",
                                            "isStatic": true,
                                            "lastClassName": "c6",
                                            "rules": Array [
                                              "line-height: 1;",
                                            ],
                                          },
                                          "displayName": "FeedbackIcon__StyledIcon",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "FeedbackIcon__StyledIcon-yxz8rh-0",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="c6"
                                      >
                                        <StandaloneIcon
                                          a11yText="The value of this input field is invalid."
                                          size={16}
                                          symbol="exclamationPointCircle"
                                          variant="error"
                                        >
                                          <Icon
                                            aria-label="The value of this input field is invalid."
                                            size={16}
                                            symbol="exclamationPointCircle"
                                            variant="error"
                                          >
                                            <Icon__StyledIcon
                                              aria-label="The value of this input field is invalid."
                                              iSize={16}
                                              symbol="exclamationPointCircle"
                                              variant="error"
                                            >
                                              <StyledComponent
                                                aria-label="The value of this input field is invalid."
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c7",
                                                      "rules": Array [
                                                        [Function],
                                                        [Function],
                                                        [Function],
                                                      ],
                                                    },
                                                    "displayName": "Icon__StyledIcon",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                    "target": "i",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                iSize={16}
                                                symbol="exclamationPointCircle"
                                                variant="error"
                                              >
                                                <i
                                                  aria-label="The value of this input field is invalid."
                                                  className="c7"
                                                />
                                              </StyledComponent>
                                            </Icon__StyledIcon>
                                          </Icon>
                                        </StandaloneIcon>
                                      </div>
                                    </StyledComponent>
                                  </FeedbackIcon__StyledIcon>
                                </div>
                              </Transition>
                            </Fade>
                          </FeedbackIcon>
                          <Select__IconLineFix>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Select__IconLineFix-sc-1kajzpi-2",
                                    "isStatic": true,
                                    "lastClassName": "c8",
                                    "rules": Array [
                                      "line-height: 1;",
                                    ],
                                  },
                                  "displayName": "Select__IconLineFix",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Select__IconLineFix-sc-1kajzpi-2",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="c8"
                              >
                                <DecorativeIcon
                                  size={16}
                                  symbol="caretDown"
                                  variant="error"
                                >
                                  <Icon
                                    aria-hidden="true"
                                    size={16}
                                    symbol="caretDown"
                                    variant="error"
                                  >
                                    <Icon__StyledIcon
                                      aria-hidden="true"
                                      iSize={16}
                                      symbol="caretDown"
                                      variant="error"
                                    >
                                      <StyledComponent
                                        aria-hidden="true"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                              "isStatic": false,
                                              "lastClassName": "c9",
                                              "rules": Array [
                                                [Function],
                                                [Function],
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Icon__StyledIcon",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                            "target": "i",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        iSize={16}
                                        symbol="caretDown"
                                        variant="error"
                                      >
                                        <i
                                          aria-hidden="true"
                                          className="c9"
                                        />
                                      </StyledComponent>
                                    </Icon__StyledIcon>
                                  </Icon>
                                </DecorativeIcon>
                              </div>
                            </StyledComponent>
                          </Select__IconLineFix>
                        </div>
                      </Box>
                    </StyledComponent>
                  </Styled(Box)>
                </div>
              </StyledComponent>
            </Select__SelectWrapper>
          </div>
        </StyledComponent>
      </styled.div>
    </div>
  </Box>
</Select>
`;

exports[`Select disabling deactivates the select 1`] = `[Function]`;

exports[`Select disabling removes the positioning of the select so that the disabled treatment is displayed 1`] = `[Function]`;

exports[`Select feedback states ensures that the contents do not overlap the icons 1`] = `[Function]`;

exports[`Select label can have a short hint 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-select"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <span
          className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <Text
            block={false}
            bold={true}
            data-testid="selectLabel"
            invert={false}
            size="medium"
          >
            <span
              className="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__boldFont___2YS3O TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__color___2CNH8"
              data-testid="selectLabel"
            >
              The select
            </span>
          </Text>
          <Text
            block={false}
            bold={false}
            id="the-select_hint"
            invert={false}
            size="small"
          >
            <span
              className="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__small___mt5lS TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__smallFont___3S6nz TDS_Typography-modules__color___2CNH8"
              id="the-select_hint"
            >
              The short hint
            </span>
          </Text>
        </span>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`Select label must have a label 1`] = `
.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-label"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-EHOje",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-EHOje",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <span
          className="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
        >
          <Text
            block={false}
            bold={true}
            data-testid="selectLabel"
            invert={false}
            size="medium"
          >
            <span
              className="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__boldFont___2YS3O TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__color___2CNH8"
              data-testid="selectLabel"
            >
              The label
            </span>
          </Text>
        </span>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`Select needs a set of options 1`] = `[Function]`;

exports[`Select positions the down caret so that the text does not overlap it 1`] = `[Function]`;

exports[`Select renders 1`] = `
.c6 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #248700;
  font-size: 1rem;
}

.c6::before {
  content: '\\f105';
}

.c2 {
  background-color: #fff;
  position: relative;
}

.c3 {
  height: 3.25rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c3::-ms-expand {
  display: none;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c4 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c5 {
  line-height: 1;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  position: relative;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div
    class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
  >
    <label
      for="the-select"
    >
      <span
        class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
      >
        <span
          class="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__boldFont___2YS3O TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__color___2CNH8"
          data-testid="selectLabel"
        >
          The select
        </span>
      </span>
    </label>
  </div>
  <div
    class="c1"
  >
    <div
      class="c2"
    >
      <select
        aria-invalid="false"
        class="c3"
        id="the-select"
      >
        <option
          value="value-1"
        >
          text one
        </option>
        <option
          value="value-2"
        >
          text two
        </option>
      </select>
      <div
        class="TDS_Box-modules__betweenRightMargin-3___1dOvx TDS_Box-modules__inline___jTHcz c4"
      >
        <div
          class="c5"
        >
          <i
            aria-hidden="true"
            class="c6"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Select renders with a feedback state and icon 1`] = `
.c6 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c6::before {
  content: '\\f103';
}

.c8 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c8::before {
  content: '\\f105';
}

.c5 {
  line-height: 1;
}

.c2 {
  background-color: #fff;
  position: relative;
}

.c3 {
  height: 3.25rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3.25rem;
  max-height: 3.25rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c3::-ms-expand {
  display: none;
}

.c3::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c3::-webkit-inner-spin-button,
.c3::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c3:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c3:not(:focus) {
  border-color: #c12335;
}

.c4 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c7 {
  line-height: 1;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c1 {
  position: relative;
}

<div
  class="TDS_Box-modules__betweenBottomMargin-2___31zX_ TDS_Box-modules__stack___33m4D"
>
  <div
    class="TDS_Box-modules__spaceBetween___k4Ski TDS_Box-modules__inline___jTHcz"
  >
    <label
      for="the-select"
    >
      <span
        class="TDS_Box-modules__betweenRightMargin-2___20pzC TDS_Box-modules__inline___jTHcz c0"
      >
        <span
          class="TDS_Typography-modules__default___KlcpP TDS_Typography-modules__medium___1rxfE TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__boldFont___2YS3O TDS_Typography-modules__wordBreak___3OZx_ TDS_Typography-modules__color___2CNH8"
          data-testid="selectLabel"
        >
          The select
        </span>
      </span>
    </label>
  </div>
  <div
    class="c1"
  >
    <div
      class="c2"
    >
      <select
        aria-invalid="true"
        class="c3"
        id="the-select"
      >
        <option
          value="value-1"
        >
          text one
        </option>
        <option
          value="value-2"
        >
          text two
        </option>
      </select>
      <div
        class="TDS_Box-modules__betweenRightMargin-3___1dOvx TDS_Box-modules__inline___jTHcz c4"
      >
        <div
          style="transition:opacity 100ms ease-in-out;opacity:1"
        >
          <div
            class="c5"
          >
            <i
              aria-label="The value of this input field is invalid."
              class="c6"
            />
          </div>
        </div>
        <div
          class="c7"
        >
          <i
            aria-hidden="true"
            class="c8"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
