// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select can have an error message 1`] = `
.c14 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c14::before {
  content: '\\f103';
}

.c16 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c16::before {
  content: '\\f105';
}

.c4 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c4 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c7 {
  color: #2a2c2e;
  word-wrap: break-word;
  padding: 0;
  margin: 0;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
  text-align: left;
}

.c7 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c12 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c12 > *:not(:last-child) {
  margin-right: 1rem;
}

.c6 {
  padding-top: 1rem;
  padding-bottom: 1rem;
  padding-left: 1rem;
  padding-right: 1rem;
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c5 {
  border-radius: 4px;
  background-color: #fff6f8;
}

.c13 {
  line-height: 1;
}

.c9 {
  background-color: #fff;
  position: relative;
}

.c10 {
  height: 3rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c10::-ms-expand {
  display: none;
}

.c10::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c10::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c10:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c10::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c10::-webkit-inner-spin-button,
.c10::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c10:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c10:not(:focus) {
  border-color: #c12335;
}

.c11 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c15 {
  line-height: 1;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c8 {
  position: relative;
}

<Select
  defaultValue=""
  error="Oh no a terrible error!"
  feedback="error"
  hintPosition="inline"
  id="some-id"
  label="The select"
  options={
    Array [
      Object {
        "readOnly": true,
        "text": "text one",
        "value": "value-1",
      },
      Object {
        "readOnly": true,
        "text": "text two",
        "value": "value-2",
      },
    ]
  }
>
  <Box
    between={2}
    inline={false}
    tag="div"
  >
    <styled.div
      between={2}
      inline={false}
      tag="div"
    >
      <StyledComponent
        between={2}
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [
              [Function],
            ],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "lastClassName": "c12",
              "rules": Array [
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
                [Function],
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        inline={false}
        tag="div"
      >
        <div
          className="c0"
        >
          <div>
            <Box
              between="space-between"
              inline={true}
              tag="div"
            >
              <styled.div
                between="space-between"
                inline={true}
                tag="div"
              >
                <StyledComponent
                  between="space-between"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [
                        [Function],
                      ],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  inline={true}
                  tag="div"
                >
                  <div
                    className="c1"
                  >
                    <label
                      htmlFor="some-id"
                    >
                      <Styled(Box)
                        between={2}
                        inline={true}
                        tag="span"
                      >
                        <StyledComponent
                          between={2}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bZQynM",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "align-items: center;",
                                ],
                              },
                              "displayName": "Styled(Box)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bZQynM",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          inline={true}
                          tag="span"
                        >
                          <Box
                            between={2}
                            className="c2"
                            inline={true}
                            tag="span"
                          >
                            <styled.div
                              between={2}
                              className="c2"
                              inline={true}
                              tag="span"
                            >
                              <StyledComponent
                                between={2}
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [
                                      [Function],
                                    ],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": false,
                                      "lastClassName": "c12",
                                      "rules": Array [
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                inline={true}
                                tag="span"
                              >
                                <span
                                  className="c2 sc-bZQynM c2 c3"
                                >
                                  <Text
                                    block={false}
                                    bold={true}
                                    data-testid="selectLabel"
                                    invert={false}
                                    size="medium"
                                  >
                                    <Text__StyledText
                                      block={false}
                                      bold={true}
                                      data-testid="selectLabel"
                                      invert={false}
                                      size="medium"
                                    >
                                      <StyledComponent
                                        block={false}
                                        bold={true}
                                        data-testid="selectLabel"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Text__StyledText-sc-1m0rr67-0",
                                              "isStatic": false,
                                              "lastClassName": "c4",
                                              "rules": Array [
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                [Function],
                                                "sup {",
                                                "top: -0.5em;",
                                                "font-size: 0.875rem;",
                                                "position: relative;",
                                                "vertical-align: baseline;",
                                                "padding-left: 0.1em;",
                                                "}",
                                              ],
                                            },
                                            "displayName": "Text__StyledText",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                                            "target": "span",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        invert={false}
                                        size="medium"
                                      >
                                        <span
                                          className="c4"
                                          data-testid="selectLabel"
                                          size="medium"
                                        >
                                          The select
                                        </span>
                                      </StyledComponent>
                                    </Text__StyledText>
                                  </Text>
                                </span>
                              </StyledComponent>
                            </styled.div>
                          </Box>
                        </StyledComponent>
                      </Styled(Box)>
                    </label>
                  </div>
                </StyledComponent>
              </styled.div>
            </Box>
          </div>
          <InputFeedback
            feedback="error"
            id="some-id_error-message"
          >
            <Styled(Component)
              feedback="error"
              id="some-id_error-message"
              inset={3}
              role="alert"
            >
              <StyledComponent
                feedback="error"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "c5",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Styled(Component)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                id="some-id_error-message"
                inset={3}
                role="alert"
              >
                <Component
                  className="c5"
                  feedback="error"
                  id="some-id_error-message"
                  inset={3}
                  role="alert"
                >
                  <Box
                    className="c5"
                    id="some-id_error-message"
                    inline={false}
                    inset={3}
                    role="alert"
                    tag="div"
                  >
                    <styled.div
                      className="c5"
                      id="some-id_error-message"
                      inline={false}
                      inset={3}
                      role="alert"
                      tag="div"
                    >
                      <StyledComponent
                        className="c5"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [
                              [Function],
                            ],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-bdVaJa",
                              "isStatic": false,
                              "lastClassName": "c12",
                              "rules": Array [
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                                [Function],
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-bdVaJa",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        id="some-id_error-message"
                        inline={false}
                        inset={3}
                        role="alert"
                        tag="div"
                      >
                        <div
                          className="c5 sc-bwzfXH c5 c6"
                          id="some-id_error-message"
                          role="alert"
                        >
                          <Paragraph
                            align="left"
                            bold={false}
                            invert={false}
                            size="small"
                          >
                            <Paragraph__StyledParagraph
                              align="left"
                              bold={false}
                              invert={false}
                              size="small"
                            >
                              <StyledComponent
                                align="left"
                                bold={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Paragraph__StyledParagraph-efl81j-0",
                                      "isStatic": false,
                                      "lastClassName": "c7",
                                      "rules": Array [
                                        [Function],
                                        "word-wrap: break-word;",
                                        "padding: 0;",
                                        "margin: 0;",
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                        "sup {",
                                        "top: -0.5em;",
                                        "font-size: 0.875rem;",
                                        "position: relative;",
                                        "vertical-align: baseline;",
                                        "padding-left: 0.1em;",
                                        "}",
                                      ],
                                    },
                                    "displayName": "Paragraph__StyledParagraph",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Paragraph__StyledParagraph-efl81j-0",
                                    "target": "p",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                invert={false}
                                size="small"
                              >
                                <p
                                  className="c7"
                                  size="small"
                                >
                                  Oh no a terrible error!
                                </p>
                              </StyledComponent>
                            </Paragraph__StyledParagraph>
                          </Paragraph>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </Box>
                </Component>
              </StyledComponent>
            </Styled(Component)>
          </InputFeedback>
          <styled.div
            _css={
              Object {
                "position": "relative",
              }
            }
          >
            <StyledComponent
              _css={
                Object {
                  "position": "relative",
                }
              }
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "c8",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c8"
              >
                <Select__SelectWrapper>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Select__SelectWrapper-sc-1kajzpi-0",
                          "isStatic": true,
                          "lastClassName": "c9",
                          "rules": Array [
                            "background-color: #fff;",
                            "position: relative;",
                          ],
                        },
                        "displayName": "Select__SelectWrapper",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Select__SelectWrapper-sc-1kajzpi-0",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c9"
                    >
                      <Select__StyledSelect
                        aria-describedby="some-id_error-message"
                        aria-invalid={true}
                        defaultValue=""
                        feedback="error"
                        id="some-id"
                        onBlur={[Function]}
                        onFocus={[Function]}
                      >
                        <StyledComponent
                          aria-describedby="some-id_error-message"
                          aria-invalid={true}
                          defaultValue=""
                          feedback="error"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Select__StyledSelect-sc-1kajzpi-1",
                                "isStatic": false,
                                "lastClassName": "c10",
                                "rules": Array [
                                  "height: 3rem;",
                                  "appearance: none;",
                                  "&::-ms-expand {",
                                  "display: none;",
                                  "}",
                                  "width: 100%;",
                                  "margin: 0;",
                                  "outline: 0;",
                                  "text-overflow: ellipsis;",
                                  "border-color: #54595f;",
                                  "background-color: #fff;",
                                  "&::placeholder {",
                                  "font: inherit;",
                                  "letter-spacing: inherit;",
                                  "line-height: inherit;",
                                  "color: #54595f;",
                                  "}",
                                  [Function],
                                  "border-width: 1px;",
                                  "border-style: solid;",
                                  "border-radius: 4px;",
                                  "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                                  "word-wrap: break-word;",
                                  "font-size: 1rem;",
                                  "letter-spacing: -0.8px;",
                                  "line-height: 1.5;",
                                  "font-weight: 400;",
                                  "color: #2a2c2e;",
                                  [Function],
                                  "&:focus {",
                                  "border-color: transparent;",
                                  "box-shadow: 0 0 4px 1px #54595f;",
                                  "background-color: #fff;",
                                  "}",
                                  [Function],
                                  [Function],
                                ],
                              },
                              "displayName": "Select__StyledSelect",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Select__StyledSelect-sc-1kajzpi-1",
                              "target": "select",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          id="some-id"
                          onBlur={[Function]}
                          onFocus={[Function]}
                        >
                          <select
                            aria-describedby="some-id_error-message"
                            aria-invalid={true}
                            className="c10"
                            defaultValue=""
                            id="some-id"
                            onBlur={[Function]}
                            onFocus={[Function]}
                          >
                            <option
                              key="value-1"
                              value="value-1"
                            >
                              text one
                            </option>
                            <option
                              key="value-2"
                              value="value-2"
                            >
                              text two
                            </option>
                          </select>
                        </StyledComponent>
                      </Select__StyledSelect>
                      <Styled(Box)
                        between={3}
                        inline={true}
                      >
                        <StyledComponent
                          between={3}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c11",
                                "rules": Array [
                                  "position: absolute;",
                                  "top: 50%;",
                                  "transform: translateY(-50%);",
                                  "right: 1rem;",
                                  "pointer-events: none;",
                                ],
                              },
                              "displayName": "Styled(Box)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          inline={true}
                        >
                          <Box
                            between={3}
                            className="c11"
                            inline={true}
                            tag="div"
                          >
                            <styled.div
                              between={3}
                              className="c11"
                              inline={true}
                              tag="div"
                            >
                              <StyledComponent
                                between={3}
                                className="c11"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [
                                      [Function],
                                    ],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": false,
                                      "lastClassName": "c12",
                                      "rules": Array [
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                inline={true}
                                tag="div"
                              >
                                <div
                                  className="c11 sc-EHOje c11 c12"
                                >
                                  <FeedbackIcon
                                    feedback="error"
                                    showIcon={true}
                                  >
                                    <Fade
                                      in={true}
                                      mountOnEnter={true}
                                      timeout={100}
                                      unmountOnExit={true}
                                    >
                                      <Transition
                                        appear={false}
                                        enter={true}
                                        exit={true}
                                        in={true}
                                        mountOnEnter={true}
                                        onEnter={[Function]}
                                        onEntered={[Function]}
                                        onEntering={[Function]}
                                        onExit={[Function]}
                                        onExited={[Function]}
                                        onExiting={[Function]}
                                        timeout={100}
                                        unmountOnExit={true}
                                      >
                                        <div
                                          style={
                                            Object {
                                              "opacity": 1,
                                              "transition": "opacity 100ms ease-in-out",
                                            }
                                          }
                                        >
                                          <FeedbackIcon__StyledIcon>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "FeedbackIcon__StyledIcon-yxz8rh-0",
                                                    "isStatic": true,
                                                    "lastClassName": "c13",
                                                    "rules": Array [
                                                      "line-height: 1;",
                                                    ],
                                                  },
                                                  "displayName": "FeedbackIcon__StyledIcon",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "FeedbackIcon__StyledIcon-yxz8rh-0",
                                                  "target": "div",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <div
                                                className="c13"
                                              >
                                                <StandaloneIcon
                                                  a11yText="The value of this input field is invalid."
                                                  size={16}
                                                  symbol="exclamationPointCircle"
                                                  variant="error"
                                                >
                                                  <Icon
                                                    size={16}
                                                    symbol="exclamationPointCircle"
                                                    variant="error"
                                                  >
                                                    <Icon__StyledIcon
                                                      iSize={16}
                                                      symbol="exclamationPointCircle"
                                                      variant="error"
                                                    >
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                              "isStatic": false,
                                                              "lastClassName": "c14",
                                                              "rules": Array [
                                                                [Function],
                                                                [Function],
                                                                [Function],
                                                              ],
                                                            },
                                                            "displayName": "Icon__StyledIcon",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                        iSize={16}
                                                        symbol="exclamationPointCircle"
                                                        variant="error"
                                                      >
                                                        <i
                                                          className="c14"
                                                        />
                                                      </StyledComponent>
                                                    </Icon__StyledIcon>
                                                  </Icon>
                                                </StandaloneIcon>
                                              </div>
                                            </StyledComponent>
                                          </FeedbackIcon__StyledIcon>
                                        </div>
                                      </Transition>
                                    </Fade>
                                  </FeedbackIcon>
                                  <Select__IconLineFix>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Select__IconLineFix-sc-1kajzpi-2",
                                            "isStatic": true,
                                            "lastClassName": "c15",
                                            "rules": Array [
                                              "line-height: 1;",
                                            ],
                                          },
                                          "displayName": "Select__IconLineFix",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Select__IconLineFix-sc-1kajzpi-2",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="c15"
                                      >
                                        <DecorativeIcon
                                          size={16}
                                          symbol="caretDown"
                                          variant="error"
                                        >
                                          <Icon
                                            aria-hidden="true"
                                            size={16}
                                            symbol="caretDown"
                                            variant="error"
                                          >
                                            <Icon__StyledIcon
                                              aria-hidden="true"
                                              iSize={16}
                                              symbol="caretDown"
                                              variant="error"
                                            >
                                              <StyledComponent
                                                aria-hidden="true"
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                      "isStatic": false,
                                                      "lastClassName": "c16",
                                                      "rules": Array [
                                                        [Function],
                                                        [Function],
                                                        [Function],
                                                      ],
                                                    },
                                                    "displayName": "Icon__StyledIcon",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "Icon__StyledIcon-sc-1g20dn8-0",
                                                    "target": "i",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                iSize={16}
                                                symbol="caretDown"
                                                variant="error"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="c16"
                                                />
                                              </StyledComponent>
                                            </Icon__StyledIcon>
                                          </Icon>
                                        </DecorativeIcon>
                                      </div>
                                    </StyledComponent>
                                  </Select__IconLineFix>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Box>
                        </StyledComponent>
                      </Styled(Box)>
                    </div>
                  </StyledComponent>
                </Select__SelectWrapper>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
  </Box>
</Select>
`;

exports[`Select disabling deactivates the select 1`] = `[Function]`;

exports[`Select disabling removes the positioning of the select so that the disabled treatment is displayed 1`] = `[Function]`;

exports[`Select feedback states ensures that the contents do not overlap the icons 1`] = `[Function]`;

exports[`Select label can have a hint below 1`] = `
.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-select"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <styled.div
          between={2}
          className="c0"
          inline={true}
          tag="span"
        >
          <StyledComponent
            between={2}
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "ivczOm",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inline={true}
            tag="span"
          >
            <span
              className="c0 sc-bZQynM c0 c1"
            >
              <Text
                block={false}
                bold={true}
                data-testid="selectLabel"
                invert={false}
                size="medium"
              >
                <Text__StyledText
                  block={false}
                  bold={true}
                  data-testid="selectLabel"
                  invert={false}
                  size="medium"
                >
                  <StyledComponent
                    block={false}
                    bold={true}
                    data-testid="selectLabel"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Text__StyledText-sc-1m0rr67-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            "sup {",
                            "top: -0.5em;",
                            "font-size: 0.875rem;",
                            "position: relative;",
                            "vertical-align: baseline;",
                            "padding-left: 0.1em;",
                            "}",
                          ],
                        },
                        "displayName": "Text__StyledText",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    invert={false}
                    size="medium"
                  >
                    <span
                      className="c2"
                      data-testid="selectLabel"
                      size="medium"
                    >
                      The select
                    </span>
                  </StyledComponent>
                </Text__StyledText>
              </Text>
            </span>
          </StyledComponent>
        </styled.div>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`Select label can have a short hint 1`] = `
.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c3 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 0.875rem;
  -webkit-letter-spacing: -0.6px;
  -moz-letter-spacing: -0.6px;
  -ms-letter-spacing: -0.6px;
  letter-spacing: -0.6px;
  line-height: 1.42857;
  font-weight: 500;
}

.c3 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-select"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <styled.div
          between={2}
          className="c0"
          inline={true}
          tag="span"
        >
          <StyledComponent
            between={2}
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "ivczOm",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inline={true}
            tag="span"
          >
            <span
              className="c0 sc-bZQynM c0 c1"
            >
              <Text
                block={false}
                bold={true}
                data-testid="selectLabel"
                invert={false}
                size="medium"
              >
                <Text__StyledText
                  block={false}
                  bold={true}
                  data-testid="selectLabel"
                  invert={false}
                  size="medium"
                >
                  <StyledComponent
                    block={false}
                    bold={true}
                    data-testid="selectLabel"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Text__StyledText-sc-1m0rr67-0",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            "sup {",
                            "top: -0.5em;",
                            "font-size: 0.875rem;",
                            "position: relative;",
                            "vertical-align: baseline;",
                            "padding-left: 0.1em;",
                            "}",
                          ],
                        },
                        "displayName": "Text__StyledText",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    invert={false}
                    size="medium"
                  >
                    <span
                      className="c2"
                      data-testid="selectLabel"
                      size="medium"
                    >
                      The select
                    </span>
                  </StyledComponent>
                </Text__StyledText>
              </Text>
              <Text
                block={false}
                bold={false}
                id="the-select_hint"
                invert={false}
                size="small"
              >
                <Text__StyledText
                  block={false}
                  bold={false}
                  id="the-select_hint"
                  invert={false}
                  size="small"
                >
                  <StyledComponent
                    block={false}
                    bold={false}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Text__StyledText-sc-1m0rr67-0",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            "sup {",
                            "top: -0.5em;",
                            "font-size: 0.875rem;",
                            "position: relative;",
                            "vertical-align: baseline;",
                            "padding-left: 0.1em;",
                            "}",
                          ],
                        },
                        "displayName": "Text__StyledText",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    id="the-select_hint"
                    invert={false}
                    size="small"
                  >
                    <span
                      className="c3"
                      id="the-select_hint"
                      size="small"
                    >
                      The short hint
                    </span>
                  </StyledComponent>
                </Text__StyledText>
              </Text>
            </span>
          </StyledComponent>
        </styled.div>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`Select label must have a label 1`] = `
.c2 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c2 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

<label
  htmlFor="the-label"
>
  <Styled(Box)
    between={2}
    inline={true}
    tag="span"
  >
    <StyledComponent
      between={2}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bZQynM",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "align-items: center;",
            ],
          },
          "displayName": "Styled(Box)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bZQynM",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      inline={true}
      tag="span"
    >
      <Box
        between={2}
        className="c0"
        inline={true}
        tag="span"
      >
        <styled.div
          between={2}
          className="c0"
          inline={true}
          tag="span"
        >
          <StyledComponent
            between={2}
            className="c0"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  [Function],
                ],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bdVaJa",
                  "isStatic": false,
                  "lastClassName": "ivczOm",
                  "rules": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bdVaJa",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inline={true}
            tag="span"
          >
            <span
              className="c0 sc-bZQynM c0 c1"
            >
              <Text
                block={false}
                bold={true}
                data-testid="selectLabel"
                invert={false}
                size="medium"
              >
                <Text__StyledText
                  block={false}
                  bold={true}
                  data-testid="selectLabel"
                  invert={false}
                  size="medium"
                >
                  <StyledComponent
                    block={false}
                    bold={true}
                    data-testid="selectLabel"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Text__StyledText-sc-1m0rr67-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            [Function],
                            "sup {",
                            "top: -0.5em;",
                            "font-size: 0.875rem;",
                            "position: relative;",
                            "vertical-align: baseline;",
                            "padding-left: 0.1em;",
                            "}",
                          ],
                        },
                        "displayName": "Text__StyledText",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Text__StyledText-sc-1m0rr67-0",
                        "target": "span",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    invert={false}
                    size="medium"
                  >
                    <span
                      className="c2"
                      data-testid="selectLabel"
                      size="medium"
                    >
                      The label
                    </span>
                  </StyledComponent>
                </Text__StyledText>
              </Text>
            </span>
          </StyledComponent>
        </styled.div>
      </Box>
    </StyledComponent>
  </Styled(Box)>
</label>
`;

exports[`Select needs a set of options 1`] = `[Function]`;

exports[`Select positions the down caret so that the text does not overlap it 1`] = `[Function]`;

exports[`Select renders 1`] = `
.c11 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #248700;
  font-size: 1rem;
}

.c11::before {
  content: '\\f105';
}

.c4 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c4 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c9 > *:not(:last-child) {
  margin-right: 1rem;
}

.c6 {
  background-color: #fff;
  position: relative;
}

.c7 {
  height: 3rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c7::-ms-expand {
  display: none;
}

.c7::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::-webkit-inner-spin-button,
.c7::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c7:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c8 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c10 {
  line-height: 1;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 {
  position: relative;
}

<div
  class="c0"
>
  <div>
    <div
      class="c1"
    >
      <label
        for="the-select"
      >
        <span
          class="c2 sc-bZQynM c2 c3"
        >
          <span
            class="c4"
            data-testid="selectLabel"
          >
            The select
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c5"
  >
    <div
      class="c6"
    >
      <select
        aria-invalid="false"
        class="c7"
        id="the-select"
      >
        <option
          value="value-1"
        >
          text one
        </option>
        <option
          value="value-2"
        >
          text two
        </option>
      </select>
      <div
        class="c8 sc-EHOje c8 c9"
      >
        <div
          class="c10"
        >
          <i
            aria-hidden="true"
            class="c11"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`Select renders with a feedback state and icon 1`] = `
.c11 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c11::before {
  content: '\\f103';
}

.c13 {
  font-family: 'TELUS Core Icons';
  display: inline-block;
  font-weight: normal;
  font-style: normal;
  speak: none;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
  text-transform: none;
  text-rendering: auto;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 1;
  vertical-align: middle;
  color: #c12335;
  font-size: 1rem;
}

.c13::before {
  content: '\\f105';
}

.c4 {
  color: #2a2c2e;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  word-wrap: break-word;
  font-weight: 700;
}

.c4 sup {
  top: -0.5em;
  font-size: 0.875rem;
  position: relative;
  vertical-align: baseline;
  padding-left: 0.1em;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}

.c0 > *:not(:last-child) {
  margin-bottom: 0.5rem;
}

.c1 {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c3 > *:not(:last-child) {
  margin-right: 0.5rem;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c9 > *:not(:last-child) {
  margin-right: 1rem;
}

.c10 {
  line-height: 1;
}

.c6 {
  background-color: #fff;
  position: relative;
}

.c7 {
  height: 3rem;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 100%;
  margin: 0;
  outline: 0;
  text-overflow: ellipsis;
  border-color: #54595f;
  background-color: #fff;
  padding: 0.5rem 3rem 0.5rem 1rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  word-wrap: break-word;
  font-size: 1rem;
  -webkit-letter-spacing: -0.8px;
  -moz-letter-spacing: -0.8px;
  -ms-letter-spacing: -0.8px;
  letter-spacing: -0.8px;
  line-height: 1.5;
  font-weight: 400;
  color: #2a2c2e;
  -moz-appearance: textfield;
  min-height: 3rem;
  max-height: 3rem;
  padding: 0.5rem 3rem 0.5rem 1rem;
}

.c7::-ms-expand {
  display: none;
}

.c7::-webkit-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::-moz-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7:-ms-input-placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::placeholder {
  font: inherit;
  -webkit-letter-spacing: inherit;
  -moz-letter-spacing: inherit;
  -ms-letter-spacing: inherit;
  letter-spacing: inherit;
  line-height: inherit;
  color: #54595f;
}

.c7::-webkit-inner-spin-button,
.c7::-webkit-outer-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  margin: 0;
}

.c7:focus {
  border-color: transparent;
  box-shadow: 0 0 4px 1px #54595f;
  background-color: #fff;
}

.c7:not(:focus) {
  border-color: #c12335;
}

.c8 {
  position: absolute;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
  right: 1rem;
  pointer-events: none;
}

.c12 {
  line-height: 1;
}

.c2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.c5 {
  position: relative;
}

<div
  class="c0"
>
  <div>
    <div
      class="c1"
    >
      <label
        for="the-select"
      >
        <span
          class="c2 sc-bZQynM c2 c3"
        >
          <span
            class="c4"
            data-testid="selectLabel"
          >
            The select
          </span>
        </span>
      </label>
    </div>
  </div>
  <div
    class="c5"
  >
    <div
      class="c6"
    >
      <select
        aria-invalid="true"
        class="c7"
        id="the-select"
      >
        <option
          value="value-1"
        >
          text one
        </option>
        <option
          value="value-2"
        >
          text two
        </option>
      </select>
      <div
        class="c8 sc-EHOje c8 c9"
      >
        <div
          style="transition:opacity 100ms ease-in-out;opacity:1"
        >
          <div
            class="c10"
          >
            <i
              class="c11"
            />
          </div>
        </div>
        <div
          class="c12"
        >
          <i
            aria-hidden="true"
            class="c13"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
