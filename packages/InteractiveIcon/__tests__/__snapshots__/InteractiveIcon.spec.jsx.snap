// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InteractiveIcon renders 1`] = `
.c2 {
  position: absolute;
  height: 1px;
  width: 1px;
  overflow: hidden;
  -webkit-clip: rect(1px,1px,1px,1px);
  clip: rect(1px,1px,1px,1px);
}

.c3 {
  background-color: #d8d8d8;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  -webkit-transition: -webkit-transform 200ms ease-in-out;
  -webkit-transition: transform 200ms ease-in-out;
  transition: transform 200ms ease-in-out;
  -webkit-transform: scale(0,0);
  -ms-transform: scale(0,0);
  transform: scale(0,0);
}

.c0:focus .c3,
.c0:active .c3 {
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.c1 {
  padding: 0;
  margin: 0;
  border-width: 0;
  font-family: "TELUS-Web","Helvetica Neue",Helvetica,Arial,sans-serif;
  color: #2a2c2e;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background: none;
  box-shadow: none;
  cursor: pointer;
  outline: none;
  width: 2.5rem;
  height: 2.5rem;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  position: relative;
  -webkit-tap-highlight-color: transparent;
}

.c1:focus::-moz-focus-inner {
  border: 0;
}

.c1:hover svg {
  -webkit-transition: -webkit-transform 150ms ease-in-out;
  -webkit-transition: transform 150ms ease-in-out;
  transition: transform 150ms ease-in-out;
  -webkit-transform: scale(1.1,1.1);
  -ms-transform: scale(1.1,1.1);
  transform: scale(1.1,1.1);
}

.c1:active svg {
  -webkit-transition: -webkit-transform 150ms ease-in-out;
  -webkit-transition: transform 150ms ease-in-out;
  transition: transform 150ms ease-in-out;
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.c4 {
  position: relative;
  top: 0;
  width: 24px;
  height: 24px;
  fill: #2a2c2e;
}

@media (prefers-reduced-motion:reduce) {
  .c3 {
    -webkit-transition: none;
    transition: none;
  }
}

@media (prefers-reduced-motion:reduce) {
  .c1:hover > svg {
    -webkit-transition: none;
    transition: none;
  }
}

<IconButton
  a11yText="This is an interactive icon"
  icon={[Function]}
  tag="button"
  variant="default"
>
  <ThemeProvider
    theme={
      Object {
        "hoverBackgroundColor": "#d8d8d8",
      }
    }
  >
    <Styled(StyledInteractiveIconButton)
      as="button"
      variant="default"
    >
      <StyledComponent
        as="button"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": false,
              "lastClassName": "c1",
              "rules": Array [
                "padding: 0;",
                "margin: 0;",
                "border-width: 0;",
                "font-family: \\"TELUS-Web\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif;",
                "color: #2a2c2e;",
                "appearance: none;",
                "background: none;",
                "box-shadow: none;",
                "cursor: pointer;",
                [Function],
                "width: 2.5rem;",
                "height: 2.5rem;",
                "display: inline-flex;",
                "justify-content: center;",
                "align-items: center;",
                "position: relative;",
                "-webkit-tap-highlight-color: transparent;",
                "&:hover svg {",
                "transition: transform 150ms ease-in-out;",
                "transform: scale(1.1, 1.1);",
                "}",
                "&:active svg {",
                "transition: transform 150ms ease-in-out;",
                "transform: scale(1, 1);",
                "}",
                "&:hover > svg {",
                "@media (prefers-reduced-motion: reduce) {",
                "transition: none;",
                "}",
                "}",
              ],
            },
            "displayName": "Styled(StyledInteractiveIconButton)",
            "foldedComponentIds": Array [
              "c0",
            ],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "button",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        variant="default"
      >
        <button
          className="c0 c1"
        >
          <A11yContent>
            <A11yContent__StyledA11yContent>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "A11yContent__StyledA11yContent-sc-15wexwk-0",
                      "isStatic": true,
                      "lastClassName": "c2",
                      "rules": Array [
                        "position: absolute;",
                        "height: 1px;",
                        "width: 1px;",
                        "overflow: hidden;",
                        "clip: rect(1px, 1px, 1px, 1px);",
                      ],
                    },
                    "displayName": "A11yContent__StyledA11yContent",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "A11yContent__StyledA11yContent-sc-15wexwk-0",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <span
                  className="c2"
                >
                  This is an interactive icon
                </span>
              </StyledComponent>
            </A11yContent__StyledA11yContent>
          </A11yContent>
          <StyledInteractiveIconHover>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "StyledInteractiveIconHover-sc-1aj10i2-0",
                    "isStatic": false,
                    "lastClassName": "c3",
                    "rules": Array [
                      [Function],
                      "@media (prefers-reduced-motion: reduce) {",
                      "transition: none;",
                      "}",
                      "position: absolute;",
                      "top: 0;",
                      "left: 0;",
                      "width: 100%;",
                      "height: 100%;",
                      "border-radius: 50%;",
                      "transition: transform 200ms ease-in-out;",
                      "transform: scale(0,0);",
                      ".c0:focus &, .c0:active & {",
                      "transform: scale(1,1);",
                      "}",
                    ],
                  },
                  "displayName": "StyledInteractiveIconHover",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "StyledInteractiveIconHover-sc-1aj10i2-0",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <span
                className="c3"
              />
            </StyledComponent>
          </StyledInteractiveIconHover>
          <Dependent
            color="greyShark"
          >
            <Dependent
              color="greyShark"
            >
              <styled.svg
                color="greyShark"
                data-testid="dependentSvg"
                height="24"
                viewBox="0 0 24 24"
                width="24"
              >
                <StyledComponent
                  color="greyShark"
                  data-testid="dependentSvg"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [
                        Object {
                          "aria-hidden": true,
                          "focusable": false,
                        },
                      ],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "c4",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "styled.svg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  height="24"
                  viewBox="0 0 24 24"
                  width="24"
                >
                  <svg
                    aria-hidden={true}
                    className="c4"
                    color="greyShark"
                    data-testid="dependentSvg"
                    focusable={false}
                    height="24"
                    viewBox="0 0 24 24"
                    width="24"
                  >
                    <path
                      d="M12 24C5.383 24 0 18.617 0 12S5.383 0 12 0s12 5.383 12 12-5.383 12-12 12zm0-22.957C5.958 1.043 1.043 5.958 1.043 12c0 6.042 4.915 10.957 10.957 10.957 6.042 0 10.957-4.915 10.957-10.957 0-6.042-4.915-10.957-10.957-10.957zm-.697 11.654l-5.7-.176A.632.632 0 0 1 5 11.892v.21c0-.332.27-.605.602-.605h5.697v-.1l.178-5.791a.64.64 0 0 1 .63-.606h-.209c.334 0 .605.267.605.602v5.895h5.895c.335 0 .602.27.602.605v-.21a.64.64 0 0 1-.606.63l-5.79.178-.101.001v5.697a.605.605 0 0 1-.605.602h.21a.632.632 0 0 1-.63-.603l-.175-5.7z"
                      fillRule="nonzero"
                    />
                  </svg>
                </StyledComponent>
              </styled.svg>
            </Dependent>
          </Dependent>
        </button>
      </StyledComponent>
    </Styled(StyledInteractiveIconButton)>
  </ThemeProvider>
</IconButton>
`;

exports[`InteractiveIcon renders Dependent icon with Link 1`] = `
.c1 {
  position: relative;
  top: 0;
  width: 24px;
  height: 24px;
  fill: #2a2c2e;
}

.c0 {
  display: inline-block;
}

.c0:focus {
  outline: auto 5px -webkit-focus-ring-color;
}

.c0:link,
.c0:visited {
  color: #2a2c2e;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c0:hover {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c0 svg {
  -webkit-transition: -webkit-transform 150ms ease-in-out;
  -webkit-transition: transform 150ms ease-in-out;
  transition: transform 150ms ease-in-out;
}

.c0:hover svg {
  -webkit-transform: scale(1.1,1.1);
  -ms-transform: scale(1.1,1.1);
  transform: scale(1.1,1.1);
}

.c0:active svg {
  -webkit-transform: scale(1,1);
  -ms-transform: scale(1,1);
  transform: scale(1,1);
}

.c0:active {
  background-color: #d8d8d8;
  border-radius: 0.25rem;
  padding: 0.125rem;
  margin: -0.125rem;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c0:focus {
  border: 0.125rem solid #71757b;
  padding: 0.125rem;
  margin: -0.25rem;
  border-radius: 0.25rem;
  outline: none;
}

.c0 > svg {
  vertical-align: bottom;
}

<WithForwardedRef(Link)
  href="#"
  icon={[Function]}
  iconPosition="left"
>
  <Link
    forwardedRef={null}
    href="#"
    icon={[Function]}
    iconPosition="left"
    reactRouterLinkComponent={null}
    to={null}
  >
    <Link__StyledLink
      as="a"
      context={
        Object {
          "inheritColor": undefined,
        }
      }
      hasIcon={true}
      href="#"
      to={null}
    >
      <StyledComponent
        as="a"
        context={
          Object {
            "inheritColor": undefined,
          }
        }
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "Link__StyledLink-sc-1bokult-0",
              "isStatic": false,
              "lastClassName": "c0",
              "rules": Array [
                ":focus {",
                "outline: auto 5px -webkit-focus-ring-color;",
                "}",
                "&:link,&:visited {",
                "color: #2a2c2e;",
                "text-decoration: underline;",
                "}",
                "&:hover {",
                "text-decoration: none;",
                "}",
                "& svg {",
                "}",
                "& svg {",
                "transition: transform 150ms ease-in-out;",
                "}",
                "&:hover svg {",
                "transform: scale(1.1, 1.1);",
                "}",
                "&:active svg {",
                "transform: scale(1, 1);",
                "}",
                [Function],
                [Function],
                [Function],
              ],
            },
            "displayName": "Link__StyledLink",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "Link__StyledLink-sc-1bokult-0",
            "target": "a",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        hasIcon={true}
        href="#"
        to={null}
      >
        <a
          className="c0"
          href="#"
          to={null}
        >
          <Dependent
            color="greyShark"
            style={
              Object {
                "marginRight": "0.5rem",
              }
            }
          >
            <Dependent
              color="greyShark"
              style={
                Object {
                  "marginRight": "0.5rem",
                }
              }
            >
              <styled.svg
                color="greyShark"
                data-testid="dependentSvg"
                height="24"
                style={
                  Object {
                    "marginRight": "0.5rem",
                  }
                }
                viewBox="0 0 24 24"
                width="24"
              >
                <StyledComponent
                  color="greyShark"
                  data-testid="dependentSvg"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [
                        Object {
                          "aria-hidden": true,
                          "focusable": false,
                        },
                      ],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "c1",
                        "rules": Array [
                          [Function],
                          [Function],
                          [Function],
                        ],
                      },
                      "displayName": "styled.svg",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "svg",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  height="24"
                  style={
                    Object {
                      "marginRight": "0.5rem",
                    }
                  }
                  viewBox="0 0 24 24"
                  width="24"
                >
                  <svg
                    aria-hidden={true}
                    className="c1"
                    color="greyShark"
                    data-testid="dependentSvg"
                    focusable={false}
                    height="24"
                    style={
                      Object {
                        "marginRight": "0.5rem",
                      }
                    }
                    viewBox="0 0 24 24"
                    width="24"
                  >
                    <path
                      d="M19.717 2c.612 0 1.198.235 1.61.646a2.275 2.275 0 01.135 3.086l-.138.148L7.11 20.093a2.215 2.215 0 01-.227.205l-.03.015-4.114 1.648a.544.544 0 01-.581-.119.536.536 0 01-.146-.495l.027-.087 1.644-4.118a.519.519 0 01.07-.124l.05-.056L18.107 2.646A2.281 2.281 0 0119.718 2zm-15.1 15.715l-1.11 2.776 2.772-1.11-1.663-1.666zM16.114 6.167L5.358 16.931l1.68 1.682 1.335-1.37c1.2-1.216 3.012-3.027 5.672-5.67l3.753-3.721-1.683-1.685zm4.454-2.753a1.222 1.222 0 00-1.595-.096l-.103.091-1.993 1.995 1.686 1.689 2.002-1.982c.23-.224.355-.524.355-.844a1.19 1.19 0 00-.352-.853z"
                      fillRule="evenodd"
                    />
                  </svg>
                </StyledComponent>
              </styled.svg>
            </Dependent>
          </Dependent>
          Edit
        </a>
      </StyledComponent>
    </Link__StyledLink>
  </Link>
</WithForwardedRef(Link)>
`;
