# The docker-compose.yml describes all the services in our application. While Docker Compose is best suited for
#  multi-container applications, we can use it to simplify our interaction with Docker.
#  https://docs.docker.com/compose/overview/

# `docker-compose build` --> Build the image. Do this first.
# `docker images` --> View the image you just built

# `docker-compose run lib <command>` --> <command> and any arguments will be forwarded onto the Dockerfile entrypoint, "yarn".
# `docker-compose run lib test` --> Run tests.
# `docker-compose run --service-ports -d lib test:e2e -- -a` --> Start the styleguidist dev server.

version: '3'
services:
  ciboot:
    container_name: tds-core-dev
    build: .
    ports:
      - 3000:3000
      - 4445:4445
      - 8032:8032
    volumes:
      - './:/tds-core/'
    environment:
      - SAUCELABS_USERNAME=${SAUCELABS_USERNAME?Missing SAUCELABS_USERNAME environment variable}
      - SAUCELABS_ACCESS_KEY=${SAUCELABS_ACCESS_KEY?Missing SAUCELABS_ACCESS_KEY environment variable}
  e2e:
    container_name: tds-core-e2e
    build:
      context: .
      dockerfile: e2e/Dockerfile
    environment:
      - mode=-a
      - SAUCELABS_USERNAME=${SAUCELABS_USERNAME?Missing SAUCELABS_USERNAME environment variable}
      - SAUCELABS_ACCESS_KEY=${SAUCELABS_ACCESS_KEY?Missing SAUCELABS_ACCESS_KEY environment variable}
    entrypoint:
      - npm
      - run
      - test:e2e
      - --
      - $mode
    network_mode: host
    ports:
      - 3000:3000
    depends_on:
      - ciboot
    volumes:
      - './e2e/.:/tds-core/e2e/'
      - './scripts/.:/tds-core/scripts/'
      - './config/.:/tds-core/config/'
      - './packages/.:/tds-core/packages/'
      - './shared/.:/tds-core/shared/'
      - './.git/.:/tds-core/.git/'
      - '${PWD}/lerna.json:/tds-core/lerna.json'
      - '${PWD}/babel.config.js:/tds-core/babel.config.js'
