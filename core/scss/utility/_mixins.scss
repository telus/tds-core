// Helpful mixins

// Mixin for mapping a set of :hover styles onto the :focus state
// for a slightly nicer keyboard-user experience. Use where you'd use &:hover.
// For example:
// .something-interactive {
//    background: $normal-background-color;
//    @include alt-state {
//       background: $hover-background-color;
//    }
// }

@mixin alt-state() {
  &:hover,
  &:focus {
    @content;
  }
}

//
// Breakpoints
//

// Mobile-first breakpoint mixin. This is the preferred way to use a
// breakpoint, with larger devices inheriting from smaller ones.
//
// @param  {mixed} $bp  You can pass in "small", "medium", or "large".
// Or, a direct pixel value works too (eg. "800px")
// @return {void}
@mixin from-breakpoint($bp) {
  @if ($bp == 'xs') {
    @content;
  }

  @else {
    @if map-has-key($breakpoints, $bp) {
      $list: map-get($breakpoints, $bp);
      $bp: nth($list, 1);
    }

    @media screen and (min-width: #{$bp}) {
      @content;
    }
  }
}

// Target a specific breakpoint
@mixin at-breakpoint($bp) {
  $list: map-get($breakpoints, $bp);
  $min: nth($list, 1);
  $max: nth($list, length($list));

  @if ($min == null) {
    @media screen and (max-width: #{$max - 1}) {
      @content;
    }
  }

  @else if ($max == null) {
    @media screen and (min-width: #{$min}) {
      @content;
    }
  }

  @else {
    @media screen and (min-width: #{$min}) and (max-width: #{$max - 1}) {
      @content;
    }
  }
}

// Get just the pixel value representing one bound of a breakpoint.
// Defaults to 'upper', as in the upper bound of the given range;
// will always return the lower bound on 'xl' because the upper one is null.
// Usage:
// .page { max-width: breakpoint(large); }
@function breakpoint($which: xs, $bound: 'upper') {
  @if not map-has-key($breakpoints, $which) {
    $valid-bps: map-keys($breakpoints);
    @error "`#{$which}` is not a valid breakpoint. Try one of these: `#{$valid-bps}`";
  }

  $bp: map-get($breakpoints, $which);
  @if ($bound == 'upper') and ($which != 'xl') {
    @return nth($bp, 2);
  }
  @else {
    @return nth($bp, 1);
  }
}

//
// Typography helpers
//

@function rem($size) {
  @return ($size / $font-size-base) * 1rem;
}

@function baseline-margin($size) {
  @return rem($size - ($body-text-size * $body-line-height));
}

// Create an underline which doesn't intersect with descenders on lowercase
// letters.
@mixin clear-descenders($text-color, $bg-color) {
  background:
    linear-gradient($bg-color, $bg-color),
    linear-gradient($bg-color, $bg-color),
    linear-gradient($text-color, $text-color);
  background-size:
    .05em 1px,
    .05em 1px,
    1px 1px;
  background-repeat:
    no-repeat,
    no-repeat,
    repeat-x;
  text-shadow:
    .03em 0 $bg-color,
    -.03em 0 $bg-color,
    0 .03em $bg-color,
    0 -.03em $bg-color,
    .06em 0 $bg-color,
    -.06em 0 $bg-color,
    .09em 0 $bg-color,
    -.09em 0 $bg-color,
    .12em 0 $bg-color,
    -.12em 0 $bg-color,
    .15em 0 $bg-color,
    -.15em 0 $bg-color;
  background-position:
    0 95%,
    100% 95%,
    0 95%;
  text-decoration: none;
}

//
// Clearfix
//

@mixin clearfix {
  &::after,
  &::before {
    clear: both;
    content: '';
    display: table;
  }
}
